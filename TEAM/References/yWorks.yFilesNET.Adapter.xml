<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>yWorks.yFilesNET.Adapter</name>
  </assembly>
  <members>
    <member name="T:yWorks.Layout.Tree.AspectRatioTreeLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Tree.AspectRatioTreeLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Tree.AspectRatioTreeLayoutData.SubtreeAspectRatios">
      <summary>
        <para>Gets or sets the mapping from nodes to the aspect ratio of their sub tree.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Tree.AspectRatioTreeLayout.SubtreeAspectRatioDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.AspectRatioTreeLayoutData.RootPlacements">
      <summary>
        <para>Gets or sets the mapping from nodes with sub trees to their placements.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Tree.AspectRatioTreeLayout.RootPlacementDpKey" />
      <seealso cref="M:yWorks.Layout.Tree.AspectRatioTreeLayout.GetRootPlacement(System.Object)" />
    </member>
    <member name="P:yWorks.Layout.Tree.AspectRatioTreeLayoutData.SubtreeRoutingPolicies">
      <summary>
        <para>Gets or sets the mapping from nodes to the routing policies of their sub trees.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Tree.AspectRatioTreeLayout.SubtreeRoutingPolicyDpKey" />
      <seealso cref="M:yWorks.Layout.Tree.AspectRatioTreeLayout.GetSubtreeArrangement(System.Object)" />
    </member>
    <member name="M:yWorks.Layout.Tree.AspectRatioTreeLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Tree.BalloonLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Tree.BalloonLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Tree.BalloonLayoutData.InterleavedNodes">
      <summary>
        <para>Gets or sets the collection of nodes that should be arranged in an interleaved fashion.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Tree.BalloonLayout.InterleavedNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.BalloonLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.BalloonLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.BalloonLayoutData.TreeRoot">
      <summary>
        <para>Gets or sets the mapping for marking the node that will be used as root node of the tree.</para>
      </summary>
      <remarks>
        <para>The custom root node selection induced by this property is only considered if the <see cref="P:yWorks.Layout.Tree.BalloonLayout.RootNodePolicy">root node policy</see> is set to <see cref="F:yWorks.Layout.Tree.RootNodePolicy.SelectedRoot" />.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Tree.BalloonLayout.SelectedRootDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.BalloonLayoutData.EdgeLabelPreferredPlacement">
      <summary>
        <para>Gets or sets the mapping that provides a <see cref="T:yWorks.Layout.PreferredPlacementDescriptor" /> instance for edge <see cref="T:yWorks.Graph.ILabel" />s.</para>
      </summary>
      <seealso cref="T:yWorks.Layout.PreferredPlacementDescriptor" />
      <seealso cref="F:yWorks.Layout.LayoutGraphAdapter.EdgeLabelLayoutPreferredPlacementDescriptorDpKey" />
    </member>
    <member name="M:yWorks.Layout.Tree.BalloonLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Router.BusRouterData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Router.BusRouter" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Router.BusRouterData.AffectedEdges">
      <summary>
        <para>Gets or sets the collection of edges affected by this router.</para>
      </summary>
      <remarks>
        <para>This collection is only used by the router if the <see cref="P:yWorks.Layout.Router.BusRouter.Scope" /> is set to <see cref="F:yWorks.Layout.Router.Scope.RouteAffectedEdges" />. The <see cref="P:yWorks.Layout.DpKeyItemCollection`1.DpKey" /> only has to be specified if the <see cref="P:yWorks.Layout.Router.BusRouter.AffectedEdgesDpKey" /> is not <see cref="F:yWorks.Layout.Router.BusRouter.DefaultAffectedEdgesDpKey" /></para>
      </remarks>
      <seealso cref="P:yWorks.Layout.Router.BusRouter.AffectedEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.BusRouterData.EdgeDescriptors">
      <summary>
        <para>Gets or sets the mapping of edges to their <see cref="T:yWorks.Layout.Router.BusDescriptor" /></para>
      </summary>
      <seealso cref="F:yWorks.Layout.Router.BusRouter.EdgeDescriptorDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.BusRouterData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.BusRouterData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.BusRouterData.SourcePortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their source port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.SourcePortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.BusRouterData.TargetPortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their target port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.TargetPortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.BusRouterData.NodePortCandidateSets">
      <summary>
        <para>Gets or sets a mapping from nodes to their <see cref="T:yWorks.Layout.PortCandidateSet" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidateSet.NodePortCandidateSetDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.BusRouterData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="M:yWorks.Layout.Router.BusRouterData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Router.ChannelEdgeRouterData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Router.ChannelEdgeRouter" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Router.ChannelEdgeRouterData.AffectedEdges">
      <summary>
        <para>Gets or sets the collection of edges affected by this router.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Router.ChannelEdgeRouter.AffectedEdgesDpKey" />
    </member>
    <member name="M:yWorks.Layout.Router.ChannelEdgeRouterData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Circular.CircularLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Circular.CircularLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Circular.CircularLayoutData.CircleIds">
      <summary>
        <para>Gets or sets the mapper from nodes to their circle id.</para>
      </summary>
      <remarks>
        <para>If this property is set, the mapper is filled by the layout with the circle information.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Circular.CircularLayout.CircleIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Circular.CircularLayoutData.CustomGroups">
      <summary>
        <para>Gets or sets the mapping from nodes to their custom group object.</para>
      </summary>
      <remarks>
        <para>The custom groups are only considered if <see cref="P:yWorks.Layout.Circular.CircularLayout.LayoutStyle" /> is set to <see cref="F:yWorks.Layout.Circular.LayoutStyle.CustomGroups" /></para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Circular.CircularLayout.CustomGroupsDpKey" />
    </member>
    <member name="P:yWorks.Layout.Circular.CircularLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Circular.CircularLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Circular.CircularLayoutData.EdgeBundleDescriptors">
      <summary>
        <para>Gets or sets the mapping of edges to their <see cref="T:yWorks.Layout.EdgeBundleDescriptor" />.</para>
      </summary>
      <remarks>
        <para>Bundling together multiple edges means that their common parts are to some degree merged into a bundled part. At the source and target point, the edges are again clearly split.</para>
        <para>If an edge is mapped to <c>null</c>, the <see cref="P:yWorks.Layout.EdgeBundling.DefaultBundleDescriptor">default descriptor</see> is used.</para>
      </remarks>
      <seealso cref="T:yWorks.Layout.EdgeBundleDescriptor" />
      <seealso cref="P:yWorks.Layout.Circular.CircularLayout.EdgeBundling" />
    </member>
    <member name="M:yWorks.Layout.Circular.CircularLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.ComponentLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.ComponentLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.ComponentLayoutData.AffectedComponents">
      <summary>
        <para>Gets or sets a collection of nodes that determine the components that shall be laid out.</para>
      </summary>
      <remarks>
        <para>Note that components will be laid out if and only if at least one of the nodes is in this collection.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.ComponentLayout.AffectedComponentsDpKey" />
    </member>
    <member name="P:yWorks.Layout.ComponentLayoutData.ComponentIds">
      <summary>
        <para>Gets or sets the mapping from nodes to their component comparable that is used to sort the components.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.ComponentLayout.ComponentIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.ComponentLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.ComponentLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="M:yWorks.Layout.ComponentLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.CompositeLayoutData">
      <summary>
        <para>Combines several <see cref="T:yWorks.Layout.LayoutData" /> instances.</para>
      </summary>
      <remarks>
        <para>This is especially useful if several layouts are run at once, for example a general layout and a subsequent edge routing.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.CompositeLayoutData.Items">
      <summary>
        <para>Gets or sets a collection of composed layout data objects.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.CompositeLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.ContextItemMapping`3">
      <summary>
        <para>Provides different ways to define a mapping from items to values that takes a context object into consideration, too.</para>
      </summary>
      <remarks>
        <para>Only one of the provided ways to define a mapping can be used at the same time, therefore only one of the properties <see cref="P:yWorks.Layout.ContextItemMapping`3.ContextDelegate" />, <see cref="P:yWorks.Layout.ItemMapping`2.Delegate" />, <see cref="P:yWorks.Layout.ItemMapping`2.Mapper" />, and <see cref="P:yWorks.Layout.ItemMapping`2.Constant" /> should be set on each instance.</para>
        <para>This class supports <see cref="T:yWorks.Layout.LayoutData" /> implementations and does not usually have to be used explicitly.</para>
      </remarks>
      <typeparam name="TItem">
        <para>The type of the items that are mapped.</para>
      </typeparam>
      <typeparam name="TValue">
        <para>The type of the values the items are mapped to.</para>
      </typeparam>
      <typeparam name="TContext">
        <para>The type of the context passed to the <see cref="P:yWorks.Layout.ContextItemMapping`3.ContextDelegate" /></para>
      </typeparam>
    </member>
    <member name="P:yWorks.Layout.ContextItemMapping`3.ContextDelegate">
      <summary>
        <para>Gets or sets a delegate from the items and a context object to the values.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.ContextItemMapping`3.ProvideMapper(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,`2)">
      <summary>
        <para>Provides a mapper mapping the items to values.</para>
      </summary>
      <param name="adapter">
        <para>The graph adapter the mapper shall be provided for.</para>
      </param>
      <param name="layout">
        <para>The layout using the mapper.</para>
      </param>
      <param name="context">
        <para>The context object passed to the <see cref="P:yWorks.Layout.ContextItemMapping`3.ContextDelegate" />.</para>
      </param>
      <returns>
        <para>A mapper mapping the items to values.</para>
      </returns>
    </member>
    <member name="T:yWorks.Layout.DataProviderAdapter`2">
      <summary>
        <para>Wraps an <see cref="T:yWorks.Graph.IMapper`2" /> into an <see cref="T:yWorks.Algorithms.IDataProvider" />.</para>
      </summary>
      <remarks>
        <para>This class is used by <see cref="T:yWorks.Layout.LayoutExecutor" />, <see cref="T:yWorks.Layout.LayoutGraphAdapter" />, and <see cref="T:yWorks.Layout.YGraphAdapter" /> to convert an <see cref="T:yWorks.Graph.IGraph" /> into a corresponding <see cref="T:yWorks.Algorithms.Graph" />. Unless that conversion needs to be customized, or aforementioned classes cannot be used, this class usually doesn't need to be used explicitly.</para>
      </remarks>
      <typeparam name="TKey">
        <para>The type of the keys.</para>
      </typeparam>
      <typeparam name="TValue">
        <para>The type of the values.</para>
      </typeparam>
    </member>
    <member name="M:yWorks.Layout.DataProviderAdapter`2.#ctor(yWorks.Graph.IMapper{`0,`1})">
      <summary>
        <para>Creates a new instance that adapts the provided mapper instance.</para>
      </summary>
      <param name="mapper">
        <para>The mapper to adapt.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.DataProviderAdapter`2.Get(System.Object)">
      <param name="dataHolder" />
    </member>
    <member name="M:yWorks.Layout.DataProviderAdapter`2.GetInt(System.Object)">
      <param name="dataHolder" />
    </member>
    <member name="M:yWorks.Layout.DataProviderAdapter`2.GetDouble(System.Object)">
      <param name="dataHolder" />
    </member>
    <member name="M:yWorks.Layout.DataProviderAdapter`2.GetBool(System.Object)">
      <param name="dataHolder" />
    </member>
    <member name="T:yWorks.Layout.DataMapAdapter`2">
      <summary>
        <para>An adapter implementation that wraps an <see cref="T:yWorks.Graph.IMapper`2" /> to an <see cref="T:yWorks.Algorithms.IDataMap" />.</para>
      </summary>
      <typeparam name="K">
        <para>The type of the key for the mapper.</para>
      </typeparam>
      <typeparam name="V">
        <para>The type of the value for the mapper.</para>
      </typeparam>
      <seealso cref="T:yWorks.Layout.DataProviderAdapter`2" />
    </member>
    <member name="M:yWorks.Layout.DataMapAdapter`2.#ctor(yWorks.Graph.IMapper{`0,`1})">
      <summary>
        <para>Initializes a new instance of the <see cref="T:yWorks.Layout.DataMapAdapter`2" /> class.</para>
      </summary>
      <param name="mapper">
        <para>The mapper to adapt.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.DataMapAdapter`2.Set(System.Object,System.Object)">
      <param name="dataHolder" />
      <param name="value" />
    </member>
    <member name="M:yWorks.Layout.DataMapAdapter`2.SetInt(System.Object,System.Int32)">
      <param name="dataHolder" />
      <param name="value" />
    </member>
    <member name="M:yWorks.Layout.DataMapAdapter`2.SetDouble(System.Object,System.Double)">
      <param name="dataHolder" />
      <param name="value" />
    </member>
    <member name="M:yWorks.Layout.DataMapAdapter`2.SetBool(System.Object,System.Boolean)">
      <param name="dataHolder" />
      <param name="value" />
    </member>
    <member name="T:yWorks.Layout.DpKeyItemCollection`1">
      <summary>
        <para>An item collection that allows to specify the data provider key the collection is registered with.</para>
      </summary>
      <remarks>
        <para>This class supports <see cref="T:yWorks.Layout.LayoutData" /> implementations and does not usually have to be used explicitly.</para>
      </remarks>
      <typeparam name="T">
        <para>The type of the items in the collection.</para>
      </typeparam>
    </member>
    <member name="P:yWorks.Layout.DpKeyItemCollection`1.DpKey">
      <summary>
        <para>Gets or sets the data provider key that is used for the item collection.</para>
      </summary>
      <remarks>
        <para>If no key is set, the default data provider key is used.</para>
      </remarks>
    </member>
    <member name="T:yWorks.Layout.ExtendedEdgeLabelCandidate">
      <summary>
        <para>An <see cref="T:yWorks.Layout.EdgeLabelCandidate" /> that provides a <see cref="T:yWorks.Graph.LabelModels.ILabelCandidateDescriptor">candidate descriptor</see>.</para>
      </summary>
      <remarks>
        <para>This class is used by <see cref="T:yWorks.Layout.LayoutExecutor" /> and <see cref="T:yWorks.Layout.LayoutGraphAdapter" /> to convert an <see cref="T:yWorks.Graph.IGraph" /> into a corresponding Graph. Unless that conversion needs to be customized, or aforementioned classes cannot be used, this class usually doesn't need to be used explicitly.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.ExtendedEdgeLabelCandidate.#ctor(yWorks.Algorithms.Geometry.YPoint,yWorks.Algorithms.Geometry.YDimension,System.Object,yWorks.Layout.IEdgeLabelLayout,yWorks.Graph.LabelModels.ILabelCandidateDescriptor)">
      <summary>
        <para>Returns a new instance of ExtendedEdgeLabelCandidate.</para>
      </summary>
      <remarks>
        <para>Returns a new instance of ExtendedEdgeLabelCandidate.</para>
      </remarks>
      <param name="pos">
        <para>the location of the upper left corner of the candidate.</para>
      </param>
      <param name="size">
        <para>the size of the candidate.</para>
      </param>
      <param name="param">
        <para>the parameters of the labeling model associated with this candidate.</para>
      </param>
      <param name="owner">
        <para>the label associated to the candidate.</para>
      </param>
      <param name="descriptor">
        <para>the label candidate descriptor.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.ExtendedEdgeLabelCandidate.#ctor(yWorks.Algorithms.Geometry.YOrientedRectangle,System.Object,yWorks.Layout.IEdgeLabelLayout,System.Boolean,yWorks.Graph.LabelModels.ILabelCandidateDescriptor)">
      <summary>
        <para>Returns a new instance of ExtendedEdgeLabelCandidate.</para>
      </summary>
      <remarks>
        <para>Returns a new instance of ExtendedEdgeLabelCandidate.</para>
      </remarks>
      <param name="orientedBox">
        <para>the label size and orientation</para>
      </param>
      <param name="param">
        <para>the parameters of the labeling model associated with this candidate.</para>
      </param>
      <param name="owner">
        <para>the label associated to the candidate.</para>
      </param>
      <param name="internal">
        <para>flag whether the candidate is allowed to overlap the layout of the edge.</para>
      </param>
      <param name="descriptor">
        <para>the label candidate descriptor.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.ExtendedEdgeLabelCandidate.#ctor(yWorks.Algorithms.Geometry.YPoint,yWorks.Algorithms.Geometry.YDimension,System.Object,yWorks.Layout.IEdgeLabelLayout,System.Boolean,yWorks.Graph.LabelModels.ILabelCandidateDescriptor)">
      <summary>
        <para>Returns a new instance of ExtendedEdgeLabelCandidate.</para>
      </summary>
      <remarks>
        <para>Returns a new instance of ExtendedEdgeLabelCandidate.</para>
      </remarks>
      <param name="pos">
        <para>the location of the upper left corner of the candidate.</para>
      </param>
      <param name="size">
        <para>the size of the candidate.</para>
      </param>
      <param name="param">
        <para>the parameters of the labeling model associated with this candidate.</para>
      </param>
      <param name="owner">
        <para>the label associated to the candidate.</para>
      </param>
      <param name="internal">
        <para>flag whether the candidate is allowed to overlap the layout of the edge.</para>
      </param>
      <param name="descriptor">
        <para>the label candidate descriptor.</para>
      </param>
    </member>
    <member name="P:yWorks.Layout.ExtendedEdgeLabelCandidate.Descriptor">
      <summary>
        <para>Gets the label candidate descriptor.</para>
      </summary>
    </member>
    <member name="T:yWorks.Layout.ExtendedLabelCandidateProfitModel">
      <summary>
        <para>An <see cref="T:yWorks.Layout.IProfitModel" /> that returns the profit of a label candidate for instances of <see cref="T:yWorks.Layout.ExtendedNodeLabelCandidate" /> and <see cref="T:yWorks.Layout.ExtendedEdgeLabelCandidate" />.</para>
      </summary>
      <remarks>
        <para>This class is used by <see cref="T:yWorks.Layout.LayoutExecutor" /> and <see cref="T:yWorks.Layout.LayoutGraphAdapter" /> to convert an <see cref="T:yWorks.Graph.IGraph" /> into a corresponding <see cref="T:yWorks.Algorithms.Graph" />. Unless that conversion needs to be customized, or aforementioned classes cannot be used, this class usually doesn't need to be used explicitly.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.ExtendedLabelCandidateProfitModel.GetProfit(yWorks.Layout.LabelCandidate)">
      <summary>
        <para>Returns the profit for placing a label-candidate.</para>
      </summary>
      <remarks>
        <para>This implementation returns the profit for instances of <see cref="T:yWorks.Layout.ExtendedNodeLabelCandidate" /> or 0.0 for other <see cref="T:yWorks.Layout.LabelCandidate" />s.</para>
      </remarks>
      <param name="candidate">
        <para>a label candidate</para>
      </param>
      <returns>
        <para>a value between 0 and 1.</para>
      </returns>
    </member>
    <member name="T:yWorks.Layout.ExtendedNodeLabelCandidate">
      <summary>
        <para>A <see cref="T:yWorks.Layout.NodeLabelCandidate" /> that provides a <see cref="T:yWorks.Graph.LabelModels.ILabelCandidateDescriptor">candidate descriptor</see>.</para>
      </summary>
      <remarks>
        <para>This class is used by <see cref="T:yWorks.Layout.LayoutExecutor" /> and <see cref="T:yWorks.Layout.LayoutGraphAdapter" /> to convert an <see cref="T:yWorks.Graph.IGraph" /> into a corresponding <see cref="T:yWorks.Algorithms.Graph" />. Unless that conversion needs to be customized, or aforementioned classes cannot be used, this class usually doesn't need to be used explicitly.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.ExtendedNodeLabelCandidate.#ctor(yWorks.Algorithms.Geometry.YPoint,yWorks.Algorithms.Geometry.YDimension,System.Object,yWorks.Layout.INodeLabelLayout,yWorks.Graph.LabelModels.ILabelCandidateDescriptor)">
      <summary>
        <para>Returns a new instance of ExtendedNodeLabelCandidate.</para>
      </summary>
      <remarks>
        <para>Returns a new instance of ExtendedNodeLabelCandidate.</para>
      </remarks>
      <param name="pos">
        <para>the location of the upper left corner of the candidate.</para>
      </param>
      <param name="size">
        <para>the size of the candidate.</para>
      </param>
      <param name="param">
        <para>the parameters of the labeling model associated with this candidate.</para>
      </param>
      <param name="owner">
        <para>the label associated to the candidate.</para>
      </param>
      <param name="descriptor">
        <para>the label candidate descriptor.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.ExtendedNodeLabelCandidate.#ctor(yWorks.Algorithms.Geometry.YOrientedRectangle,System.Object,yWorks.Layout.INodeLabelLayout,System.Boolean,yWorks.Graph.LabelModels.ILabelCandidateDescriptor)">
      <summary>
        <para>Returns a new instance of NodeLabelCandidate.</para>
      </summary>
      <remarks>
        <para>Returns a new instance of NodeLabelCandidate.</para>
      </remarks>
      <param name="orientedBox">
        <para>the label size and orientation</para>
      </param>
      <param name="param">
        <para>the parameters of the labeling model associated with this candidate.</para>
      </param>
      <param name="owner">
        <para>the label associated to the candidate.</para>
      </param>
      <param name="internal">
        <para>flag whether the candidate is inside the node, or outside.</para>
      </param>
      <param name="descriptor">
        <para>the label candidate descriptor.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.ExtendedNodeLabelCandidate.#ctor(yWorks.Algorithms.Geometry.YPoint,yWorks.Algorithms.Geometry.YDimension,System.Object,yWorks.Layout.INodeLabelLayout,System.Boolean,yWorks.Graph.LabelModels.ILabelCandidateDescriptor)">
      <summary>
        <para>Returns a new instance of NodeLabelCandidate.</para>
      </summary>
      <remarks>
        <para>Returns a new instance of NodeLabelCandidate.</para>
      </remarks>
      <param name="pos">
        <para>the location of the upper left corner of the candidate.</para>
      </param>
      <param name="size">
        <para>the size of the candidate.</para>
      </param>
      <param name="param">
        <para>the parameters of the labeling model associated with this candidate.</para>
      </param>
      <param name="owner">
        <para>the label associated to the candidate.</para>
      </param>
      <param name="internal">
        <para>flag whether the candidate is inside the node, or outside.</para>
      </param>
      <param name="descriptor">
        <para>the label candidate descriptor.</para>
      </param>
    </member>
    <member name="P:yWorks.Layout.ExtendedNodeLabelCandidate.Descriptor">
      <summary>
        <para>Gets the label candidate descriptor.</para>
      </summary>
    </member>
    <member name="T:yWorks.Layout.Genealogy.FamilyTreeLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Genealogy.FamilyTreeLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Genealogy.FamilyTreeLayoutData.FamilyTypes">
      <summary>
        <para>Gets or sets the mapping from nodes to their family type.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Genealogy.FamilyTreeLayout.FamilyTypeDpKey" />
      <seealso cref="T:yWorks.Layout.Genealogy.FamilyType" />
    </member>
    <member name="M:yWorks.Layout.Genealogy.FamilyTreeLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Grouping.FixGroupLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Grouping.FixGroupLayoutStage" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Grouping.FixGroupLayoutData.FixedGroupNodes">
      <summary>
        <para>Gets or sets the collection of group nodes whose contents should keep their relative positions.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Grouping.FixGroupLayoutStage.FixedGroupNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.FixGroupLayoutData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.FixGroupLayoutData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="M:yWorks.Layout.Grouping.FixGroupLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.FixNodeLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.FixNodeLayoutStage" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.FixNodeLayoutData.FixedNode">
      <summary>
        <para>Gets or sets the collection of nodes which should be considered fixed.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.FixNodeLayoutStage.FixedNodeDpKey" />
    </member>
    <member name="M:yWorks.Layout.FixNodeLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Hierarchic.HierarchicLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Hierarchic.HierarchicLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.AlternativeEdgePath">
      <summary>
        <para>Gets or sets a mapping from edges to alternative paths for edges connecting to groups, group content or folder nodes.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayout.AlternativeEdgePathDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.AlternativeGroupBounds">
      <summary>
        <para>Gets or sets a mapping from group/folder nodes to alternative bounds for these nodes.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayout.AlternativeGroupBoundsDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.CriticalEdgePriorities">
      <summary>
        <para>Gets or sets a mapping from edges to their priority to be a 'critical' edge.</para>
      </summary>
      <remarks>
        <para>The layout tries to vertically align each node pair that is connected by a critical edge (integer value &gt; 0).</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayout.CriticalEdgePriorityDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.FolderNodes">
      <summary>
        <para>Gets or sets the collection of folder nodes used for recursive edge styles in incremental mode.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayout.FolderNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.EdgeLayoutDescriptors">
      <summary>
        <para>Gets or sets the mapping of edges to their <see cref="T:yWorks.Layout.Hierarchic.EdgeLayoutDescriptor" />.</para>
      </summary>
      <remarks>
        <para>If an edge is mapped to <c>null</c>, the <see cref="P:yWorks.Layout.Hierarchic.HierarchicLayout.EdgeLayoutDescriptor">default descriptor</see> is used.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayoutCore.EdgeLayoutDescriptorDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.NodeLayoutDescriptors">
      <summary>
        <para>Gets or sets the mapping of nodes to their <see cref="T:yWorks.Layout.Hierarchic.NodeLayoutDescriptor" /></para>
      </summary>
      <remarks>
        <para>If a node is mapped to <c>null</c>, the <see cref="P:yWorks.Layout.Hierarchic.HierarchicLayout.NodeLayoutDescriptor">default descriptor</see> is used.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayoutCore.NodeLayoutDescriptorDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.SourcePortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their source port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.SourcePortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.TargetPortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their target port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.TargetPortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.NodePortCandidateSets">
      <summary>
        <para>Gets or sets a mapping from nodes to their <see cref="T:yWorks.Layout.PortCandidateSet" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidateSet.NodePortCandidateSetDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.SourceGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their source edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.SourcePortGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their source port group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.TargetGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their target edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.TargetPortGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their target port group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.LayerConstraintFactory">
      <summary>
        <para>Gets or sets the factory to specify layer constraints.</para>
      </summary>
      <seealso cref="M:yWorks.Layout.Hierarchic.HierarchicLayout.CreateLayerConstraintFactory(yWorks.Algorithms.Graph)" />
      <seealso cref="T:yWorks.Layout.Hierarchic.ILayerConstraintFactory" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.SequenceConstraintFactory">
      <summary>
        <para>Gets or sets the factory to specify sequence constraints.</para>
      </summary>
      <seealso cref="M:yWorks.Layout.Hierarchic.HierarchicLayout.CreateSequenceConstraintFactory(yWorks.Layout.LayoutGraph)" />
      <seealso cref="T:yWorks.Layout.Hierarchic.ISequenceConstraintFactory" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.IncrementalHints">
      <summary>
        <para>Gets or sets a mapping from nodes and edges to their incrementally hints.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayout.IncrementalHintsDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.LayerIndices">
      <summary>
        <para>Gets or sets a mapper from nodes to the index of their layer.</para>
      </summary>
      <remarks>
        <para>If this property is set, the mapper is filled by the layout with the layer information.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayout.LayerIndexDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.SequenceIndices">
      <summary>
        <para>Gets or sets a mapper from nodes to the sequence index in their layer.</para>
      </summary>
      <remarks>
        <para>If this property is set, the mapper is filled by the layout with the sequence information.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayout.SequenceIndexDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.PartitionGridData">
      <summary>
        <para>Gets or sets the partition grid layout data.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.SelfLoopCalculatorData">
      <summary>
        <para>Gets or sets the layout data for the <see cref="T:yWorks.Layout.Hierarchic.SelfLoopCalculator" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.ConstraintIncrementalLayererAdditionalEdgeWeights">
      <summary>
        <para>Gets or sets the mapping from edges to an additional weight used by the <see cref="T:yWorks.Layout.Hierarchic.ConstraintIncrementalLayerer" />.</para>
      </summary>
      <remarks>
        <para>The Layerer tries to keep edges with higher weights short.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.ConstraintIncrementalLayerer.AdditionalEdgeWeightDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.BfsLayererCoreNodes">
      <summary>
        <para>Gets or sets the collection of core nodes used by the <see cref="T:yWorks.Layout.Hierarchic.BFSLayerer" />.</para>
      </summary>
      <remarks>
        <para>The <see cref="T:yWorks.Layout.Hierarchic.BFSLayerer" /> is used when <see cref="P:yWorks.Layout.Hierarchic.HierarchicLayout.FromScratchLayeringStrategy" /> is set to <see cref="F:yWorks.Layout.Hierarchic.LayeringStrategy.Bfs" />.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.BFSLayerer.CoreNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.GivenLayersLayererIds">
      <summary>
        <para>Gets or set the mapping from nodes to their layer index when using the <see cref="T:yWorks.Layout.Hierarchic.GivenLayersLayerer" />.</para>
      </summary>
      <remarks>
        <para>The <see cref="T:yWorks.Layout.Hierarchic.GivenLayersLayerer" /> is used when <see cref="P:yWorks.Layout.Hierarchic.HierarchicLayout.FromScratchLayeringStrategy" /> is set to <see cref="F:yWorks.Layout.Hierarchic.LayeringStrategy.UserDefined" />.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.GivenLayersLayerer.LayerIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.EdgeDirectedness">
      <summary>
        <para>Gets or sets the mapping from edges to their directedness.</para>
      </summary>
      <remarks>
        <para>Generally, the hierarchic layout algorithm assigns nodes to layers such that most of the edges point in the <see cref="P:yWorks.Layout.MultiStageLayout.LayoutOrientation">main layout direction</see>. The directedness of an edge specifies whether it should comply with this strategy. More precisely, a value of <c>1</c> means that the edge should fully comply, a value of <c>-1</c> that it should comply inversely (the edge should point against the main layout direction), and a value of <c>0</c> means that the direction doesn't matter at all and the endpoints of the edges may be placed at the same layer. If there are conflicting preferences, edges with higher absolute values are more likely to point in the desired direction.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayout.EdgeDirectednessDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.EdgeThickness">
      <summary>
        <para>Gets or sets the mapping from edges to their thickness.</para>
      </summary>
      <remarks>
        <para>The specified non-negative thickness is considered when calculating minimum distances so that there are no overlaps between edges and other graph elements. By default, each edge has thickness <c>0</c>.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Hierarchic.HierarchicLayout.EdgeThicknessDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.HierarchicLayoutData.EdgeLabelPreferredPlacement">
      <summary>
        <para>Gets or sets the mapping that provides a <see cref="T:yWorks.Layout.PreferredPlacementDescriptor" /> instance for edge <see cref="T:yWorks.Graph.ILabel" />s.</para>
      </summary>
      <seealso cref="T:yWorks.Layout.PreferredPlacementDescriptor" />
      <seealso cref="F:yWorks.Layout.LayoutGraphAdapter.EdgeLabelLayoutPreferredPlacementDescriptorDpKey" />
    </member>
    <member name="M:yWorks.Layout.Hierarchic.HierarchicLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Hierarchic.IncrementalHintItemMapping">
      <summary>
        <para>Provides different ways to define a mapping from model items to incremental hints for use with <see cref="T:yWorks.Layout.Hierarchic.HierarchicLayoutData" />.</para>
      </summary>
      <remarks>
        <para>Only one of the provided ways to define a mapping can be used at the same time, therefore only one of the properties of this class should be set on an instance.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.Hierarchic.IncrementalHintItemMapping.IncrementalLayeringNodes">
      <summary>
        <para>Gets or sets an item collection of nodes that are mapped to <see cref="M:yWorks.Layout.Hierarchic.IIncrementalHintsFactory.CreateLayerIncrementallyHint(System.Object)">incremental layering hints</see>.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Hierarchic.IncrementalHintItemMapping.IncrementalSequencingItems">
      <summary>
        <para>Gets or sets an item collection of nodes that are mapped to <see cref="M:yWorks.Layout.Hierarchic.IIncrementalHintsFactory.CreateSequenceIncrementallyHint(System.Object)">incremental sequencing hints</see>.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.Hierarchic.IncrementalHintItemMapping.ProvideMapper(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.Hierarchic.IIncrementalHintsFactory)">
      <param name="adapter" />
      <param name="layout" />
      <param name="hintsFactory" />
    </member>
    <member name="T:yWorks.Layout.ItemCollection`1">
      <summary>
        <para>Provides different ways to define the items in a collection for use with <see cref="T:yWorks.Layout.LayoutData" />.</para>
      </summary>
      <remarks>
        <para>Only one of the provided ways to define a collection can be used at the same time, therefore only one of the properties <see cref="P:yWorks.Layout.ItemCollection`1.Items" />, <see cref="P:yWorks.Layout.ItemCollection`1.Mapper" />, and <see cref="P:yWorks.Layout.ItemCollection`1.Delegate" /> should be set on each instance.</para>
        <para>This class supports <see cref="T:yWorks.Layout.LayoutData" /> implementations and does not usually have to be used explicitly.</para>
      </remarks>
      <typeparam name="TItem">
        <para>The type of the items in the collection.</para>
      </typeparam>
    </member>
    <member name="P:yWorks.Layout.ItemCollection`1.Mapper">
      <summary>
        <para>Gets or sets a mapping from the items to a boolean value.</para>
      </summary>
      <remarks>
        <para>The mapped boolean value specifies whether an item is contained in the collection.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.ItemCollection`1.Delegate">
      <summary>
        <para>Gets or sets a delegate from the items to a boolean value.</para>
      </summary>
      <remarks>
        <para>The returned boolean value describes whether an item is contained in the collection.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.ItemCollection`1.Items">
      <summary>
        <para>Gets or sets a collection of items.</para>
      </summary>
      <remarks>
        <para>This collection contains exactly the items in the given collection.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.ItemCollection`1.Source">
      <summary>
        <para>Sets an enumerable of items.</para>
      </summary>
      <remarks>
        <para>This collection contains exactly the items in the given enumerable.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.ItemCollection`1.ProvideMapper(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm)">
      <summary>
        <para>Provides a mapper describing which elements are contained in this <see cref="T:yWorks.Layout.ItemCollection`1" />.</para>
      </summary>
      <param name="adapter">
        <para>The graph adapter the mapper shall be provided for.</para>
      </param>
      <param name="layout">
        <para>The layout using the item collection.</para>
      </param>
      <returns />
    </member>
    <member name="T:yWorks.Layout.ItemMapping`2">
      <summary>
        <para>Provides different ways to define a mapping from items to values for use with <see cref="T:yWorks.Layout.LayoutData" />.</para>
      </summary>
      <remarks>
        <para>Only one of the provided ways to define a mapping can be used at the same time, therefore only one of the properties <see cref="P:yWorks.Layout.ItemMapping`2.Mapper" />, <see cref="P:yWorks.Layout.ItemMapping`2.Delegate" /> and <see cref="P:yWorks.Layout.ItemMapping`2.Constant" /> should be set on each instance.</para>
        <para>This class supports <see cref="T:yWorks.Layout.LayoutData" /> implementations and does not usually have to be instantiated by client code explicitly. Instances of this class are properties of concrete <see cref="T:yWorks.Layout.LayoutData" /> implementations.</para>
      </remarks>
      <typeparam name="TItem">
        <para>The type of the items that are mapped.</para>
      </typeparam>
      <typeparam name="TValue">
        <para>The type of the values the items are mapped to.</para>
      </typeparam>
    </member>
    <member name="P:yWorks.Layout.ItemMapping`2.Delegate">
      <summary>
        <para>Gets or sets a delegate that implements the mapping.</para>
      </summary>
      <remarks>
        <para>This value will be ignored if either <see cref="P:yWorks.Layout.ItemMapping`2.Mapper" /> as also been set. It overrides values set to the <see cref="P:yWorks.Layout.ItemMapping`2.Constant" /> property.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.ItemMapping`2.Mapper">
      <summary>
        <para>Gets or sets an <see cref="T:yWorks.Graph.IMapper`2" /> that realizes the mapping.</para>
      </summary>
      <remarks>
        <para>Getting this property will automatically create an instance. Values set will override the effect of any values set to the <see cref="P:yWorks.Layout.ItemMapping`2.Constant" /> or <see cref="P:yWorks.Layout.ItemMapping`2.Delegate" /> properties.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.ItemMapping`2.Constant">
      <summary>
        <para>Gets or sets a constant value all items are mapped to.</para>
      </summary>
      <remarks>
        <para>This value will be ignored if either <see cref="P:yWorks.Layout.ItemMapping`2.Mapper" /> or <see cref="P:yWorks.Layout.ItemMapping`2.Delegate" /> have also been set.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.ItemMapping`2.ProvideMapper(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm)">
      <summary>
        <para>Provides a mapper mapping the items to values.</para>
      </summary>
      <remarks>
        <para>This implementation returns the <see cref="P:yWorks.Layout.ItemMapping`2.Mapper" /> if one has been set, otherwise it will create a mapper from the <see cref="P:yWorks.Layout.ItemMapping`2.Delegate" /> if one has been specified or uses a constant mapper if a <see cref="P:yWorks.Layout.ItemMapping`2.Constant" /> has been specified. If none have been specified, <c>null</c> is returned.</para>
      </remarks>
      <param name="adapter">
        <para>The graph adapter the mapper shall be provided for.</para>
      </param>
      <param name="layout">
        <para>The layout using the mapper.</para>
      </param>
      <returns>
        <para>A mapper that maps items to values or <c>null</c>.</para>
      </returns>
    </member>
    <member name="T:yWorks.Layout.Labeling.LabelingData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Labeling.GenericLabeling" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Labeling.LabelingData.AffectedLabels">
      <summary>
        <para>Gets or sets the collection of labels that shall be placed by the algorithm.</para>
      </summary>
      <remarks>
        <para>Note that the <see cref="P:yWorks.Layout.DpKeyItemCollection`1.DpKey" /> has to be set to the key assigned to <see cref="P:yWorks.Layout.Labeling.LabelingBase.AffectedLabelsDpKey" />.</para>
      </remarks>
      <seealso cref="P:yWorks.Layout.Labeling.LabelingBase.AffectedLabelsDpKey" />
    </member>
    <member name="P:yWorks.Layout.Labeling.LabelingData.NodeLabelModels">
      <summary>
        <para>Gets or sets the mapping from node labels to an <see cref="T:yWorks.Layout.INodeLabelLayoutModel" /> used by the labeling algorithm instead of the original label model.</para>
      </summary>
      <remarks>
        <para>If a label has no mapping, the original model is used as normal.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Labeling.LabelingBase.LabelModelDpKey" />
    </member>
    <member name="P:yWorks.Layout.Labeling.LabelingData.EdgeLabelModels">
      <summary>
        <para>Gets or sets the mapping from edge labels to an <see cref="T:yWorks.Layout.IEdgeLabelLayoutModel" /> used by the labeling algorithm instead of the original label model.</para>
      </summary>
      <remarks>
        <para>If a label has no mapping, the original model is used as normal.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Labeling.LabelingBase.LabelModelDpKey" />
    </member>
    <member name="P:yWorks.Layout.Labeling.LabelingData.SourceGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their source edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Labeling.LabelingData.TargetGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their target edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Labeling.LabelingData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Labeling.LabelingData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Labeling.LabelingData.EdgeLabelPreferredPlacement">
      <summary>
        <para>Gets or sets the mapping that provides a <see cref="T:yWorks.Layout.PreferredPlacementDescriptor" /> instance for edge <see cref="T:yWorks.Graph.ILabel" />s.</para>
      </summary>
      <seealso cref="T:yWorks.Layout.PreferredPlacementDescriptor" />
      <seealso cref="F:yWorks.Layout.LayoutGraphAdapter.EdgeLabelLayoutPreferredPlacementDescriptorDpKey" />
    </member>
    <member name="M:yWorks.Layout.Labeling.LabelingData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.LayoutData">
      <summary>
        <para>Base for convenience classes that specify custom data for a layout calculation done with the <see cref="T:yWorks.Layout.LayoutExecutor" />.</para>
      </summary>
      <remarks>
        <para>Implementations of this class provide item-specific configuration options for a specific layout. Single properties that affect the complete layout are available on the specific layout class itself.</para>
        <para>The <see cref="T:yWorks.Layout.LayoutExecutor" /> <see cref="M:yWorks.Layout.LayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">applies</see> these configurations when <see cref="M:yWorks.Layout.LayoutExecutor.Start">started</see>. So does <see cref="M:yWorks.Layout.LayoutGraphAdapter.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />.</para>
      </remarks>
      <seealso cref="P:yWorks.Layout.LayoutExecutor.LayoutData" />
      <seealso cref="M:yWorks.Layout.LayoutGraphAdapter.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />
      <seealso cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan,yWorks.Layout.LayoutData)" />
    </member>
    <member name="M:yWorks.Layout.LayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <summary>
        <para>Applies this layout data to the specified <paramref name="layoutGraphAdapter" />.</para>
      </summary>
      <remarks>
        <para>This method should be called before a layout is executed. It will configure the adapter and graph for to the layout.</para>
      </remarks>
      <param name="layoutGraphAdapter">
        <para>The adapter to add the layout data to.</para>
      </param>
      <param name="layout">
        <para>The layout that shall use this layout data.</para>
      </param>
      <param name="layoutGraph">
        <para>The layout graph used for the layout calculation.</para>
      </param>
    </member>
    <member name="T:yWorks.Layout.LayoutExecutor">
      <summary>
        <para>Executes a <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> and optionally animates the transition to the calculated layout.</para>
      </summary>
      <remarks>
        <para>This class is the preferred way to execute a layout. It supports calculating the layout in a separate <see cref="P:yWorks.Layout.LayoutExecutor.RunInThread">thread</see> and its animation can be customized in various ways.</para>
        <para>If no fine-grained control of the animation is required, the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" /> can be used instead.</para>
      </remarks>
      <seealso cref="T:yWorks.Graph.LayoutExtensions" />
      <seealso cref="T:yWorks.Layout.LayoutGraphAdapter" />
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.AbortHandler">
      <summary>
        <para>Gets the <see cref="T:yWorks.Algorithms.AbortHandler" /> that is used during the layout calculation, unless another <see cref="T:yWorks.Algorithms.AbortHandler" /> has been configured via <see cref="P:yWorks.Layout.LayoutExecutor.LayoutData" /> or by registering an <see cref="T:yWorks.Graph.IMapper`2" /> in the graph's <see cref="P:yWorks.Graph.IGraph.MapperRegistry" />.</para>
      </summary>
      <value>
        <para>The <see cref="T:yWorks.Algorithms.AbortHandler" /> that is used during the layout calculation.</para>
      </value>
      <seealso cref="M:yWorks.Layout.LayoutExecutor.CreateAbortHandler" />
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.TableLayoutConfigurator">
      <summary>
        <para>Gets the <see cref="P:yWorks.Layout.LayoutExecutor.TableLayoutConfigurator" /> that is used if <see cref="P:yWorks.Layout.LayoutExecutor.ConfigureTableLayout" /> is enabled.</para>
      </summary>
      <seealso cref="M:yWorks.Layout.LayoutExecutor.CreateTableLayoutConfigurator" />
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.ConfigureTableLayout">
      <summary>
        <para>Gets or sets a value indicating whether to automatically perform calls to <see cref="M:yWorks.Layout.TableLayoutConfigurator.Prepare(yWorks.Graph.IGraph)" /> and <see cref="M:yWorks.Layout.TableLayoutConfigurator.Restore(yWorks.Graph.IGraph)" /> in order to layout table nodes.</para>
      </summary>
      <remarks>
        <para>The default value is <c>true</c>.</para>
      </remarks>
      <value>
        <para>
          <c>true</c> if table layout should be configured automatically; <c>false</c> otherwise.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.Duration">
      <summary>
        <para>Gets or sets the duration of the animation.</para>
      </summary>
      <remarks>
        <para>The default value is <see cref="F:System.TimeSpan.Zero" />.</para>
      </remarks>
      <value>
        <para>The duration of the animation. A value smaller than or equal to <see cref="F:System.TimeSpan.Zero" /> will prevent the animation from happening. Instead, the result is applied immediately. A positive value will effectively force the execution to be performed asynchronously.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.RunInThread">
      <summary>
        <para>Gets or sets a value indicating whether to run the layout in a separate thread.</para>
      </summary>
      <remarks>
        <para>The default value is <c>true</c>.</para>
      </remarks>
      <value>
        <para>
          <c>true</c> if the layout is run in separate thread; otherwise, <c>false</c>. A separate thread will make <see cref="M:yWorks.Layout.LayoutExecutor.Start" /> perform the work asynchronously and return immediately.</para>
      </value>
      <seealso cref="M:yWorks.Layout.LayoutExecutor.Execute(System.Threading.ThreadStart)" />
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.AutomaticEdgeGrouping">
      <summary>
        <para>Gets or sets a value indicating whether edge groups are automatically created for edges that are connected to the same port.</para>
      </summary>
      <remarks>
        <para>If this property is enabled and no edge groups are explicitly created (no <see cref="T:yWorks.Graph.IMapper`2" /> are registered for the keys <see cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" /> and <see cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />), for each port with multiple outgoing resp. incoming edges these edges will be assigned to the same edge group. The necessary <see cref="T:yWorks.Algorithms.IDataProvider" />s will be created automatically.</para>
        <para>Without an <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> that supports edge groups, this property ahs no visual effect.</para>
        <para>The default value is <c>true</c>.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
      <seealso cref="P:yWorks.Layout.LayoutGraphAdapter.AutomaticEdgeGrouping" />
      <seealso cref="P:yWorks.Layout.LayoutExecutor.FixPorts" />
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.FixPorts">
      <summary>
        <para>Controls whether strong port constraints are automatically created.</para>
      </summary>
      <remarks>
        <para>If this property is enabled and no edge groups are explicitly created (no <see cref="T:yWorks.Graph.IMapper`2" /> are registered for the keys <see cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" /> and <see cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />), for all edges strong source and target point constraints with <see cref="F:yWorks.Layout.PortSide.Any" /> are created. The necessary <see cref="T:yWorks.Algorithms.IDataProvider" />s will be created automatically.</para>
        <para>This ensures that view <see cref="T:yWorks.Graph.IPort" />s are not moved during the layout, if the <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> supports port constraints.</para>
        <para>The default value is <c>false</c>.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
      <seealso cref="P:yWorks.Layout.LayoutGraphAdapter.FixPorts" />
      <seealso cref="P:yWorks.Layout.LayoutExecutor.AutomaticEdgeGrouping" />
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.AnimateViewport">
      <summary>
        <para>Gets or sets a value indicating whether the viewport should be animated to the new bounds of the graph.</para>
      </summary>
      <remarks>
        <para>The result when this property is <c>true</c> after the animation is the same as calling <see cref="M:yWorks.Controls.GraphControl.FitGraphBounds(System.Nullable{yWorks.Geometry.InsetsD})" />. Setting this property to <c>true</c> and changing <see cref="P:yWorks.Layout.LayoutExecutor.Duration" /> to <see cref="F:System.TimeSpan.Zero" /> will disable the animation, but still change the viewport to the new graph bounds.</para>
        <para>When the viewport should stay the same, the layout algorithms often have to be coerced to keep parts of the graph in the same location. This can be done by wrapping the layout algorithm in an instance of <see cref="T:yWorks.Layout.FixNodeLayoutStage" />.</para>
        <para>The default value is <c>false</c>.</para>
      </remarks>
      <value>
        <para>
          <c>true</c> if the viewport should be animated; <c>false</c> otherwise.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.ConsiderViewportLimiter">
      <summary>
        <para>Gets or sets a value indicating whether to respect the <see cref="P:yWorks.Controls.CanvasControl.ViewportLimiter" /> of the <see cref="T:yWorks.Controls.GraphControl" /> of this instance.</para>
      </summary>
      <remarks>
        <para>The default value is <c>false</c>.</para>
      </remarks>
      <value>
        <para>
          <c>true</c> if the <see cref="P:yWorks.Controls.CanvasControl.ViewportLimiter" /> should be considered, otherwise <c>false</c>.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.EasedAnimation">
      <summary>
        <para>Gets or sets a value indicating whether to use eased animation.</para>
      </summary>
      <remarks>
        <para>The default value is <c>false</c>.</para>
      </remarks>
      <value>
        <para>
          <c>true</c> if the animation should be done with eased; <c>false</c> otherwise.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.TargetBoundsInsets">
      <summary>
        <para>Gets or sets the insets (in world coordinates) that will be added to the content rectangle when calculating the target viewport.</para>
      </summary>
      <remarks>
        <para>The default value is <see cref="F:yWorks.Geometry.InsetsD.Empty" />.</para>
      </remarks>
      <value>
        <para>The target bounds insets.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.UpdateContentRect">
      <summary>
        <para>Gets or sets a value indicating whether the content rectangle property of the <see cref="T:yWorks.Controls.CanvasControl" /> should be updated upon completion.</para>
      </summary>
      <remarks>
        <para>The default value is <c>false</c>.</para>
      </remarks>
      <value>
        <para>
          <c>true</c> if the content rectangle should be updated; <c>false</c> otherwise.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.AllowUserInteraction">
      <summary>
        <para>Gets or sets a value indicating whether user interaction should be allowed during the animation.</para>
      </summary>
      <remarks>
        <para>If <c>false</c>, the <see cref="T:yWorks.Controls.Input.WaitInputMode" /> is queried from the <see cref="T:yWorks.Controls.CanvasControl" /> and <see cref="P:yWorks.Controls.Input.WaitInputMode.Waiting" /> is enabled during the animation.</para>
        <para>The default value is <c>false</c>.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.IsRunning">
      <summary>
        <para>Gets a value indicating whether this instance is currently running.</para>
      </summary>
      <value>
        <para>
          <c>true</c> if this instance has been <see cref="M:yWorks.Layout.LayoutExecutor.Start">started</see> but has not yet <see cref="E:yWorks.Layout.LayoutExecutor.LayoutFinished">finished</see>; <c>false</c> otherwise.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.LayoutData">
      <summary>
        <para>Gets or sets the layout data that is applied when <see cref="M:yWorks.Layout.LayoutExecutor.Start">starting</see> the executor.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.#ctor(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:yWorks.Layout.LayoutExecutor" /> class.</para>
      </summary>
      <remarks>
        <para>Use the <see cref="M:yWorks.Layout.LayoutExecutor.Start" /> method to actually execute the task. This will disable animation and content rect updates.</para>
      </remarks>
      <param name="graphControl">
        <para>The control which will be animated and provides the <see cref="T:yWorks.Graph.IGraph" /> instance.</para>
      </param>
      <param name="layout">
        <para>The <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> to use.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.#ctor(yWorks.Controls.GraphControl,yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:yWorks.Layout.LayoutExecutor" /> class.</para>
      </summary>
      <param name="graphControl">
        <para>The control which will be animated and provides the <see cref="T:yWorks.Graph.IGraph" /> instance.</para>
      </param>
      <param name="graph">
        <para>The graph to layout.</para>
      </param>
      <param name="layout">
        <para>The <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> to use.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.Start">
      <summary>
        <para>Actually starts the layout process and the optional animation.</para>
      </summary>
      <remarks>
        <para>This method will ultimately call the <see cref="M:yWorks.Layout.LayoutExecutor.Execute(System.Threading.ThreadStart)" /> method. If the <see cref="P:yWorks.Layout.LayoutExecutor.Duration" /> is zero and <see cref="P:yWorks.Layout.LayoutExecutor.RunInThread" /> is <c>false</c>, the call will be blocking (synchronous), otherwise it will return before <see cref="E:yWorks.Layout.LayoutExecutor.LayoutFinished" /> is called, which happens asynchronously.</para>
        <para>If this instance is already <see cref="P:yWorks.Layout.LayoutExecutor.IsRunning">running</see>, this method returns the same task as the previous invocation.</para>
      </remarks>
      <seealso cref="M:yWorks.Layout.LayoutExecutor.Execute(System.Threading.ThreadStart)" />
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.SequentialExecution">
      <summary>
        <para>Gets or sets a value indicating whether this instance waits for other instances to finish their operations before it executes.</para>
      </summary>
      <remarks>
        <para>The default value is <c>true</c>. In this case, this instance waits for other instances of <see cref="T:yWorks.Layout.LayoutExecutor" /> that handle the same instance of <see cref="T:yWorks.Controls.GraphControl" /> to finish their operation before it executes.</para>
        <para>If set to <c>false</c>, this instance ignores other potentially running instances, and doesn't try to stop them but rather executes immediately. Also it will not be stopped by other instances. This should only be used under special circumstances since it can result in race conditions if multiple animations or calculations are performed on the same graph instance.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.Stop">
      <summary>
        <para>Stops a currently running layout calculation or animation.</para>
      </summary>
      <remarks>
        <para>If a layout calculation is still running, it will be requested to stopped via <see cref="M:yWorks.Algorithms.AbortHandler.Stop" /> and the animation will not run. If the layout calculation was already completed, the animation will be aborted immediately and the layout result will be shown immediately.</para>
        <para>To just skip the animation but let the calculation finish normally, the <see cref="P:yWorks.Layout.LayoutExecutor.Duration" /> can be set to zero at any time before the animation was started.</para>
        <para>The <see cref="E:yWorks.Layout.LayoutExecutor.LayoutFinished" /> event will be raised as soon as the layout algorithm stops.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.Cancel">
      <summary>
        <para>Cancels a currently running layout calculation or animation.</para>
      </summary>
      <remarks>
        <para>If a layout calculation is still running, it will be canceled immediately via <see cref="M:yWorks.Algorithms.AbortHandler.Cancel" /> and the animation will not run. If the layout calculation was already completed, the animation will be aborted and the layout result will be shown immediately.</para>
        <para>Note that when canceling an <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> via <see cref="T:yWorks.Algorithms.AbortHandler" /> may leave the <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> instance in an undefined state. The respective <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> instance should no longer be used.</para>
        <para>The <see cref="E:yWorks.Layout.LayoutExecutor.LayoutFinished" /> event will be raised as soon as the layout algorithm aborts.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.SelectionModel">
      <summary>
        <para>Gets or sets the <see cref="T:yWorks.Controls.ISelectionModel`1" /> to use for the automatically registered <see cref="T:yWorks.Algorithms.IDataProvider" /> instances for <see cref="F:yWorks.Layout.LayoutKeys.AffectedNodesDpKey" /> and <see cref="F:yWorks.Layout.LayoutKeys.AffectedEdgesDpKey" />.</para>
      </summary>
      <remarks>
        <para>If this value is <c>null</c> and <see cref="P:yWorks.Layout.LayoutExecutor.Graph" /> is the same instance as <see cref="P:yWorks.Layout.LayoutExecutor.GraphControl" />'s <see cref="T:yWorks.Graph.IGraph" /> instance, the selection model from <see cref="P:yWorks.Layout.LayoutExecutor.GraphControl" /> is used instead.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.PrepareTableLayout">
      <summary>
        <para>Set up <see cref="P:yWorks.Layout.LayoutExecutor.TableLayoutConfigurator" /> for a layout.</para>
      </summary>
      <remarks>
        <para>This implementation configures <see cref="P:yWorks.Layout.TableLayoutConfigurator.HorizontalLayout" /> according to the <see cref="P:yWorks.Layout.MultiStageLayout.LayoutOrientation" /> and calls <see cref="M:yWorks.Layout.TableLayoutConfigurator.Prepare(yWorks.Graph.IGraph)" /></para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.CreateAbortHandler">
      <summary>
        <para>Creates an instance of <see cref="T:yWorks.Algorithms.AbortHandler" />.</para>
      </summary>
      <remarks>
        <para>This method is called upon first access to the <see cref="P:yWorks.Layout.LayoutExecutor.AbortHandler" /> property.</para>
      </remarks>
      <returns>
        <para>A new <see cref="T:yWorks.Algorithms.AbortHandler" /> instance to use during layout calculation.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.CreateTableLayoutConfigurator">
      <summary>
        <para>Create a new instance of <see cref="T:yWorks.Layout.TableLayoutConfigurator" /> that is used if <see cref="P:yWorks.Layout.LayoutExecutor.ConfigureTableLayout" /> is enabled.</para>
      </summary>
      <remarks>
        <para>This method is called upon first access to the <see cref="P:yWorks.Layout.LayoutExecutor.TableLayoutConfigurator" /> property.</para>
      </remarks>
      <returns>
        <para>A new instance of the <see cref="T:yWorks.Layout.TableLayoutConfigurator" /> class.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.Execute(System.Threading.ThreadStart)">
      <summary>
        <para>Callback method that executes the specified <paramref name="threadStart" />.</para>
      </summary>
      <remarks>
        <para>This implementation will either start a new <see cref="T:System.Threading.Thread" /> if <see cref="P:yWorks.Layout.LayoutExecutor.RunInThread" /> is set to <c>true</c>, or directly invoke the <paramref name="threadStart" />.</para>
      </remarks>
      <param name="threadStart">
        <para>The thread start delegate to execute.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.GetTargetBounds">
      <summary>
        <para>Calculate the target bounds to be used for the <see cref="P:yWorks.Controls.CanvasControl.ContentRect" /> as well as the <see cref="T:yWorks.Controls.ViewportAnimation" /> after the layout has finished.</para>
      </summary>
      <remarks>
        <para>By default, the value is computed with <see cref="M:yWorks.Layout.LayoutGraphUtilities.GetBoundingBox(yWorks.Layout.LayoutGraph,yWorks.Algorithms.INodeCursor,yWorks.Algorithms.IEdgeCursor,System.Boolean)" /> with labels and <see cref="P:yWorks.Layout.LayoutExecutor.TargetBoundsInsets" /> taken into account.</para>
      </remarks>
      <returns>
        <para>The desired content rectangle and the bounds for a viewport animation.</para>
      </returns>
    </member>
    <member name="E:yWorks.Layout.LayoutExecutor.LayoutFinished">
      <summary>
        <para>This event will be raised when this instance has finished its work.</para>
      </summary>
      <remarks>
        <para>The event will be raised upon completion or upon an exception. In the case of an exception the <see cref="T:yWorks.Layout.LayoutEventArgs" /> contain the <see cref="P:yWorks.Layout.LayoutEventArgs.Exception" />the exception instance.</para>
        <para>Event handlers need to set the event as <see cref="P:yWorks.Layout.LayoutEventArgs.Handled">handled</see> to prevent further processing in both the exception and the normal case.</para>
      </remarks>
      <seealso cref="M:yWorks.Layout.LayoutExecutor.Start" />
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.RestoreTableLayout">
      <summary>
        <para>Writes the table layout information provided through <see cref="P:yWorks.Layout.LayoutExecutor.TableLayoutConfigurator" /> back to all tables.</para>
      </summary>
      <remarks>
        <para>This method is only called when the layout is not animated.</para>
      </remarks>
      <seealso cref="M:yWorks.Layout.LayoutExecutor.PrepareTableLayout" />
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.CreateAnimation">
      <summary>
        <para>Factory method that creates the <see cref="T:yWorks.Controls.IAnimation" /> that will be used by this instance after the layout has been calculated.</para>
      </summary>
      <returns>
        <para>The animation to use after the layout.</para>
      </returns>
      <seealso cref="P:yWorks.Layout.LayoutExecutor.Duration" />
      <seealso cref="P:yWorks.Layout.LayoutExecutor.AnimateViewport" />
      <seealso cref="M:yWorks.Layout.LayoutExecutor.CreateMorphAnimation" />
      <seealso cref="M:yWorks.Layout.LayoutExecutor.CreateViewportAnimation(yWorks.Geometry.RectD)" />
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.CreateTableAnimations">
      <summary>
        <para>Creates an animation that morphs the layout of all <see cref="T:yWorks.Graph.ITable" />s in the graph.</para>
      </summary>
      <seealso cref="T:yWorks.Controls.TableAnimation" />
      <seealso cref="P:yWorks.Layout.LayoutExecutor.ConfigureTableLayout" />
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.LayoutGraph">
      <summary>
        <para>Gets the layout graph that is used by this instance to calculate the layout.</para>
      </summary>
      <value>
        <para>The layout graph.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.GraphControl">
      <summary>
        <para>Gets the control this instance has been created for.</para>
      </summary>
      <value>
        <para>The control.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.Layout">
      <summary>
        <para>Gets the <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> this instance is using.</para>
      </summary>
      <value>
        <para>The layout.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutExecutor.Graph">
      <summary>
        <para>Gets the graph this instance is working on.</para>
      </summary>
      <value>
        <para>The graph.</para>
      </value>
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.CreateViewportAnimation(yWorks.Geometry.RectD)">
      <summary>
        <para>Factory method that creates the animation for the <see cref="P:yWorks.Controls.CanvasControl.Viewport" />.</para>
      </summary>
      <remarks>
        <para>The created animation will morph the currnt viewport into the one where the whole graph fits. The result after the animation is thus the same as calling <see cref="M:yWorks.Controls.GraphControl.FitGraphBounds(System.Nullable{yWorks.Geometry.InsetsD})" />.</para>
      </remarks>
      <param name="targetBounds">
        <para>The target bounds of the animation.</para>
      </param>
      <returns>
        <para>The animation instance.</para>
      </returns>
      <seealso cref="M:yWorks.Layout.LayoutExecutor.CreateAnimation" />
    </member>
    <member name="M:yWorks.Layout.LayoutExecutor.CreateMorphAnimation">
      <summary>
        <para>Factory method that creates the animation for the <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <returns>
        <para>The animation instance.</para>
      </returns>
      <seealso cref="M:yWorks.Layout.LayoutExecutor.CreateAnimation" />
    </member>
    <member name="T:yWorks.Layout.LayoutEventArgs">
      <summary>
        <para>This event argument is used by <see cref="E:yWorks.Layout.LayoutExecutor.LayoutFinished" /> event.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.LayoutEventArgs.#ctor(System.Exception)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:yWorks.Layout.LayoutEventArgs" /> class.</para>
      </summary>
      <param name="exception">
        <para>The exception to pass to <see cref="P:yWorks.Layout.LayoutEventArgs.Exception" />.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.LayoutEventArgs.#ctor">
      <summary>
        <para>Initializes a new instance of the <see cref="T:yWorks.Layout.LayoutEventArgs" /> class.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.LayoutEventArgs.Exception">
      <summary>
        <para>Gets the exception this event is signaling, if the event was caused by an exception.</para>
      </summary>
      <value>
        <para>The exception.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.LayoutEventArgs.Handled">
      <summary>
        <para>Mark an event as handled.</para>
      </summary>
      <remarks>
        <para>In order to prevent further processing, the event needs to be marked as handled.</para>
        <para>Note that setting this to <c>true</c> doesn't prevent other event handlers from being called. These must check for this flag explicitly.</para>
      </remarks>
    </member>
    <member name="T:yWorks.Graph.LayoutExtensions">
      <summary>
        <para>Provides methods to run an automatic layout algorithm on an <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <seealso cref="T:yWorks.Layout.LayoutGraphAdapter" />
      <seealso cref="T:yWorks.Layout.LayoutExecutor" />
      <seealso cref="T:yWorks.Layout.ILayoutAlgorithm" />
    </member>
    <member name="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)">
      <summary>
        <para>Convenience method that runs a layout on a graph using <see cref="M:yWorks.Layout.LayoutGraphAdapter.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />.</para>
      </summary>
      <param name="graph">
        <para>The graph.</para>
      </param>
      <param name="layout">
        <para>The layout.</para>
      </param>
      <param name="layoutData">
        <para>The layout data.</para>
      </param>
      <seealso cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />
      <seealso cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" />
      <seealso cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan,yWorks.Layout.LayoutData)" />
    </member>
    <member name="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)">
      <summary>
        <para>Convenience method that runs a layout on the graph of a given graph control, and animates the transition.</para>
      </summary>
      <remarks>
        <para>The implementation simply delegates to a properly configured instance of <see cref="T:yWorks.Layout.LayoutExecutor" />. In addition to the default configuration, it enables <see cref="P:yWorks.Layout.LayoutExecutor.AnimateViewport" />, <see cref="P:yWorks.Layout.LayoutExecutor.EasedAnimation" />, and <see cref="P:yWorks.Layout.LayoutExecutor.UpdateContentRect" />. For more fine-grained control of the animation, use <see cref="T:yWorks.Layout.LayoutExecutor" /> directly.</para>
      </remarks>
      <param name="graphControl">
        <para>The graph control.</para>
      </param>
      <param name="layout">
        <para>The layout to run.</para>
      </param>
      <param name="morphDuration">
        <para>The duration of the animation of the layout.</para>
      </param>
      <returns>
        <para>A task representing the layout.</para>
      </returns>
      <seealso cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan,yWorks.Layout.LayoutData)" />
      <seealso cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />
    </member>
    <member name="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan,yWorks.Layout.LayoutData)">
      <summary>
        <para>Convenience method that runs a layout on the graph of a given graph control, and animates the transition.</para>
      </summary>
      <remarks>
        <para>The implementation simply delegates to a properly configured instance of <see cref="T:yWorks.Layout.LayoutExecutor" />. In addition to the default configuration, it enables <see cref="P:yWorks.Layout.LayoutExecutor.AnimateViewport" />, <see cref="P:yWorks.Layout.LayoutExecutor.EasedAnimation" />, and <see cref="P:yWorks.Layout.LayoutExecutor.UpdateContentRect" />. For more fine-grained control of the animation, use <see cref="T:yWorks.Layout.LayoutExecutor" /> directly.</para>
      </remarks>
      <param name="control">
        <para>The graph control.</para>
      </param>
      <param name="layout">
        <para>The layout to run.</para>
      </param>
      <param name="morphDuration">
        <para>The duration of the animation of the layout.</para>
      </param>
      <param name="layoutData">
        <para>The layout data to apply.</para>
      </param>
      <returns>
        <para>A task representing the layout.</para>
      </returns>
      <seealso cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" />
      <seealso cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />
    </member>
    <member name="M:yWorks.Graph.LayoutExtensions.CreateLayoutAnimation(yWorks.Graph.IGraph,yWorks.Layout.CopiedLayoutGraph,System.TimeSpan)">
      <summary>
        <para>Creates a new <see cref="T:yWorks.Controls.IAnimation" /> instance that animates the current graph to the layout given by a <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> instance.</para>
      </summary>
      <param name="graph">
        <para>the graph for which the layout should be animated</para>
      </param>
      <param name="layoutGraph">
        <para>the <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> that contains all target layout information</para>
      </param>
      <param name="preferredDuration">
        <para>the preferred duration of the animation</para>
      </param>
      <remarks>
        <para>The returned instance is suitable for morphing an <see cref="T:yWorks.Graph.IGraph" /> to a layout computed by one of the layout algorithms.</para>
      </remarks>
      <example>
        <para>While it is usually recommended to use <see cref="T:yWorks.Layout.LayoutExecutor" /> to handle layout calculation and subsequent animation, the <see cref="T:yWorks.Controls.IAnimation" /> produced by this method can be used manually, as well:</para>
      </example>
    </member>
    <member name="M:yWorks.Graph.LayoutExtensions.CreateLayerConstraintFactory(yWorks.Layout.Hierarchic.HierarchicLayout,yWorks.Graph.IGraph)">
      <summary>
        <para>Creates and registers an incremental layer constraint factory for an <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <param name="layout">
        <para>The IHL instance where the factory is created. This is a <c>this</c> parameter, so that the method can be used as an extension method.</para>
      </param>
      <param name="graph">
        <para>The graph for which the factory is created</para>
      </param>
      <returns>
        <para>the sequence constraint factory</para>
      </returns>
    </member>
    <member name="M:yWorks.Graph.LayoutExtensions.CreateSequenceConstraintFactory(yWorks.Layout.Hierarchic.HierarchicLayout,yWorks.Graph.IGraph)">
      <summary>
        <para>Creates and registers a sequencer constraint factory for an <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <param name="layout">
        <para>The IHL instance where the factory is created. This is a <c>this</c> parameter, so that the method can be used as an extension method.</para>
      </param>
      <param name="graph">
        <para>The graph.</para>
      </param>
      <returns>
        <para>the sequence constraint factory</para>
      </returns>
    </member>
    <member name="T:yWorks.Geometry.GeomExtensions">
      <summary>
        <para>Provides extension methods to convert between different implementations of geometric classes like <see cref="T:yWorks.Geometry.RectD" /> and <see cref="T:yWorks.Algorithms.Geometry.YRectangle" />.</para>
      </summary>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToRectD(yWorks.Algorithms.Geometry.Rectangle2D)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Geometry.RectD" /> from a given <see cref="T:yWorks.Algorithms.Geometry.Rectangle2D" />.</para>
      </summary>
      <param name="rect">
        <para>The <see cref="T:yWorks.Algorithms.Geometry.Rectangle2D" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Geometry.RectD" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToRectD(yWorks.Algorithms.Geometry.YRectangle)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Geometry.RectD" /> from a given <see cref="T:yWorks.Algorithms.Geometry.YRectangle" />.</para>
      </summary>
      <param name="rect">
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YRectangle" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Geometry.RectD" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToInsetsD(yWorks.Algorithms.Geometry.Insets)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Geometry.InsetsD" /> from a given <see cref="T:yWorks.Algorithms.Geometry.Insets" />.</para>
      </summary>
      <param name="insets">
        <para>The <see cref="T:yWorks.Algorithms.Geometry.Insets" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Geometry.InsetsD" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToSizeD(yWorks.Algorithms.Geometry.YDimension)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Geometry.SizeD" /> from a given <see cref="T:yWorks.Algorithms.Geometry.YDimension" />.</para>
      </summary>
      <param name="dimension">
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YDimension" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Geometry.SizeD" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToPointD(yWorks.Algorithms.Geometry.Point2D)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Geometry.PointD" /> from a given <see cref="T:yWorks.Algorithms.Geometry.Point2D" />.</para>
      </summary>
      <param name="point">
        <para>The <see cref="T:yWorks.Algorithms.Geometry.Point2D" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Geometry.PointD" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToPointD(yWorks.Algorithms.Geometry.YPoint)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Geometry.PointD" /> from a given <see cref="T:yWorks.Algorithms.Geometry.YPoint" />.</para>
      </summary>
      <param name="point">
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YPoint" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Geometry.PointD" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToPointD(yWorks.Algorithms.Geometry.YVector)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Geometry.PointD" /> from a given <see cref="T:yWorks.Algorithms.Geometry.YVector" />.</para>
      </summary>
      <param name="point">
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YVector" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Geometry.PointD" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToRectangle2D(yWorks.Geometry.RectD)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Algorithms.Geometry.Rectangle2D">Rectangle2D</see> from a given <see cref="T:yWorks.Geometry.RectD" />.</para>
      </summary>
      <param name="rectangle">
        <para>The <see cref="T:yWorks.Geometry.RectD" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Algorithms.Geometry.Rectangle2D">Rectangle2D</see>.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToOrientedRectangle(yWorks.Geometry.IOrientedRectangle)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Algorithms.Geometry.YOrientedRectangle" /> from a given <see cref="T:yWorks.Geometry.IOrientedRectangle" />.</para>
      </summary>
      <param name="rect">
        <para>The <see cref="T:yWorks.Geometry.RectD" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YOrientedRectangle" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToImmutableOrientedRectangle(yWorks.Algorithms.Geometry.YOrientedRectangle)">
      <summary>
        <para>Creates an immutable <see cref="T:yWorks.Geometry.IOrientedRectangle" /> from a given <see cref="T:yWorks.Algorithms.Geometry.YOrientedRectangle" />.</para>
      </summary>
      <param name="rect">
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YOrientedRectangle" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Geometry.IOrientedRectangle" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToYRectangle(yWorks.Geometry.RectD)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Algorithms.Geometry.YRectangle" /> from a given <see cref="T:yWorks.Geometry.RectD" />.</para>
      </summary>
      <param name="rectangle">
        <para>The <see cref="T:yWorks.Geometry.RectD" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YRectangle" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToYDimension(yWorks.Geometry.SizeD)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Algorithms.Geometry.YDimension" /> from a given <see cref="T:yWorks.Geometry.SizeD" />.</para>
      </summary>
      <param name="size">
        <para>The <see cref="T:yWorks.Geometry.SizeD" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YDimension" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToInsets(yWorks.Geometry.InsetsD)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Algorithms.Geometry.Insets" /> from a given <see cref="T:yWorks.Geometry.InsetsD" />.</para>
      </summary>
      <param name="insets">
        <para>The <see cref="T:yWorks.Geometry.InsetsD" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Geometry.InsetsD" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToYPoint(yWorks.Geometry.PointD)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Algorithms.Geometry.YPoint" /> from a given <see cref="T:yWorks.Geometry.PointD" />.</para>
      </summary>
      <param name="point">
        <para>The <see cref="T:yWorks.Geometry.PointD" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YPoint" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToPoint2D(yWorks.Geometry.PointD)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Algorithms.Geometry.Point2D" /> from a given <see cref="T:yWorks.Geometry.PointD" />.</para>
      </summary>
      <param name="point">
        <para>The <see cref="T:yWorks.Geometry.PointD" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Algorithms.Geometry.Point2D" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Geometry.GeomExtensions.ToYVector(yWorks.Geometry.PointD)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Algorithms.Geometry.YVector" /> from a given <see cref="T:yWorks.Geometry.PointD" />.</para>
      </summary>
      <param name="point">
        <para>The <see cref="T:yWorks.Geometry.PointD" />.</para>
      </param>
      <returns>
        <para>The <see cref="T:yWorks.Algorithms.Geometry.YVector" />.</para>
      </returns>
    </member>
    <member name="T:yWorks.Layout.LayoutGraphAdapter">
      <summary>
        <para>Adapter class that can be used to obtain an <see cref="T:yWorks.Layout.LayoutGraph" /> from an <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <remarks>
        <para>Typically, this class is not used directly but through the convenience class <see cref="T:yWorks.Layout.LayoutExecutor" /> or the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" /></para>
        <para>This class will use the provided <see cref="P:yWorks.Layout.LayoutGraphAdapter.SelectionModel" /> to register corresponding <see cref="T:yWorks.Algorithms.IDataProvider" />s for the data provider keys <see cref="F:yWorks.Layout.LayoutKeys.AffectedNodesDpKey" /> and <see cref="F:yWorks.Layout.LayoutKeys.AffectedEdgesDpKey" /> to the layout graph. Moreover, it will automatically convert <see cref="T:yWorks.Graph.IMapper`2" /> instances registered with the <see cref="T:yWorks.Graph.IMapperRegistry" /> of the <see cref="P:yWorks.Layout.LayoutGraphAdapter.AdaptedGraph" /> into corresponding <see cref="T:yWorks.Algorithms.IDataProvider" /> instances of the layout graph.</para>
        <para>In addition, this class supports <see cref="T:yWorks.Graph.IGraph" />s with edge to edge connections, i.e., edges that are adjacent to other edges. Since such edges are not allowed in an <see cref="T:yWorks.Layout.LayoutGraph" />, the property <see cref="P:yWorks.Layout.LayoutGraphAdapter.HideEdgesAtEdges" /> specifies whether these edges shouldn't be converted into the layout graph at all or converted into a corresponding structure with dummy nodes.</para>
      </remarks>
      <seealso cref="T:yWorks.Layout.CopiedLayoutGraph" />
      <seealso cref="T:yWorks.Layout.ILayoutAlgorithm" />
    </member>
    <member name="F:yWorks.Layout.LayoutGraphAdapter.EdgeLabelLayoutPreferredPlacementDescriptorDpKey">
      <summary>
        <para>An <see cref="T:yWorks.Graph.IMapperRegistry" /> tag for an <see cref="T:yWorks.Graph.IMapper`2" /> that provides for the edge <see cref="T:yWorks.Graph.ILabel" />s in the <see cref="P:yWorks.Layout.LayoutGraphAdapter.AdaptedGraph" /> a <see cref="T:yWorks.Layout.PreferredPlacementDescriptor" /> instance.</para>
      </summary>
      <remarks>
        <para>If there is a <see cref="T:yWorks.Graph.IMapper`2" /> in the <see cref="P:yWorks.Graph.IGraph.MapperRegistry" /> it will be queried for each <see cref="T:yWorks.Graph.IEdge">edge</see> <see cref="T:yWorks.Graph.ILabel">label</see> to set the <see cref="P:yWorks.Layout.IEdgeLabelLayout.PreferredPlacementDescriptor" /> property of the adapted implementation.</para>
      </remarks>
    </member>
    <member name="F:yWorks.Layout.LayoutGraphAdapter.OriginalNodeDpKey">
      <summary>
        <para>A data provider key that can be used to look up the original <see cref="T:yWorks.Graph.INode" /> of a <see cref="T:yWorks.Algorithms.Node" />.</para>
      </summary>
      <remarks>
        <para>This data provider is created automatically for a <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> that is created as a copy of an <see cref="T:yWorks.Graph.IGraph" /> with the help of a <see cref="T:yWorks.Layout.LayoutGraphAdapter" />. Especially, it is available if the layout is run with a <see cref="T:yWorks.Layout.LayoutExecutor" /> or the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />.</para>
      </remarks>
    </member>
    <member name="F:yWorks.Layout.LayoutGraphAdapter.OriginalEdgeDpKey">
      <summary>
        <para>A data provider key that can be used to look up the original <see cref="T:yWorks.Graph.IEdge" /> of an <see cref="T:yWorks.Algorithms.Edge" />.</para>
      </summary>
      <remarks>
        <para>This data provider is created automatically for a <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> that is created as a copy of an <see cref="T:yWorks.Graph.IGraph" /> with the help of a <see cref="T:yWorks.Layout.LayoutGraphAdapter" />. Especially, it is available if the layout is run with a <see cref="T:yWorks.Layout.LayoutExecutor" /> or the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />.</para>
      </remarks>
    </member>
    <member name="F:yWorks.Layout.LayoutGraphAdapter.OriginalNodeLabelDpKey">
      <summary>
        <para>A data provider key that can be used to look up the original <see cref="T:yWorks.Graph.ILabel" /> of an <see cref="T:yWorks.Layout.INodeLabelLayout" />.</para>
      </summary>
      <remarks>
        <para>This data provider is created automatically for a <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> that is created as a copy of an <see cref="T:yWorks.Graph.IGraph" /> with the help of a <see cref="T:yWorks.Layout.LayoutGraphAdapter" />. Especially, it is available if the layout is run with a <see cref="T:yWorks.Layout.LayoutExecutor" /> or the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />.</para>
      </remarks>
    </member>
    <member name="F:yWorks.Layout.LayoutGraphAdapter.OriginalEdgeLabelDpKey">
      <summary>
        <para>A data provider key that can be used to look up the original <see cref="T:yWorks.Graph.ILabel" /> of an <see cref="T:yWorks.Layout.IEdgeLabelLayout" />.</para>
      </summary>
      <remarks>
        <para>This data provider is created automatically for a <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> that is created as a copy of an <see cref="T:yWorks.Graph.IGraph" /> with the help of a <see cref="T:yWorks.Layout.LayoutGraphAdapter" />. Especially, it is available if the layout is run with a <see cref="T:yWorks.Layout.LayoutExecutor" /> or the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />.</para>
      </remarks>
    </member>
    <member name="F:yWorks.Layout.LayoutGraphAdapter.OriginalSourcePortDpKey">
      <summary>
        <para>A data provider key that can be used to look up the <see cref="T:yWorks.Graph.IPort">source port</see> of the original <see cref="T:yWorks.Graph.IEdge" /> of an <see cref="T:yWorks.Algorithms.Edge" />.</para>
      </summary>
      <remarks>
        <para>This data provider is created automatically for a <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> that is created as a copy of an <see cref="T:yWorks.Graph.IGraph" /> with the help of a <see cref="T:yWorks.Layout.LayoutGraphAdapter" />. Especially, it is available if the layout is run with a <see cref="T:yWorks.Layout.LayoutExecutor" /> or the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />.</para>
      </remarks>
    </member>
    <member name="F:yWorks.Layout.LayoutGraphAdapter.OriginalTargetPortDpKey">
      <summary>
        <para>A data provider key that can be used to look up the <see cref="T:yWorks.Graph.IPort">target port</see> of the original <see cref="T:yWorks.Graph.IEdge" /> of an <see cref="T:yWorks.Algorithms.Edge" />.</para>
      </summary>
      <remarks>
        <para>This data provider is created automatically for a <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> that is created as a copy of an <see cref="T:yWorks.Graph.IGraph" /> with the help of a <see cref="T:yWorks.Layout.LayoutGraphAdapter" />. Especially, it is available if the layout is run with a <see cref="T:yWorks.Layout.LayoutExecutor" /> or the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />.</para>
      </remarks>
    </member>
    <member name="F:yWorks.Layout.LayoutGraphAdapter.UnconnectedPortsDpKey">
      <summary>
        <para>A data provider key that can be used to look up the original <b>unconnected</b><see cref="T:yWorks.Graph.IPort">ports</see> of the original <see cref="T:yWorks.Graph.IPortOwner" /> of an <see cref="T:yWorks.Algorithms.Node" /> or, in the case of edge-to-edge connections, an <see cref="T:yWorks.Algorithms.Edge" />.</para>
      </summary>
      <remarks>
        <para>You can access <b>all</b> (connected and unconnected) ports through the <see cref="P:yWorks.Graph.IPortOwner.Ports" /> property of the original <see cref="T:yWorks.Graph.IGraph" /> elements, which can be retrieved through the <see cref="F:yWorks.Layout.LayoutGraphAdapter.OriginalNodeDpKey" /> and <see cref="F:yWorks.Layout.LayoutGraphAdapter.OriginalEdgeDpKey" /> data providers. The information about whether a port is connected or not is not readily accessible from there, though. You can use this data provider to specifically find these port, e.g. to create additional <see cref="T:yWorks.Layout.PortCandidate" />s or just reserve space for them.</para>
        <para>This data provider is created automatically for a <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> that is created as a copy of an <see cref="T:yWorks.Graph.IGraph" /> with the help of a <see cref="T:yWorks.Layout.LayoutGraphAdapter" />. Especially, it is available if the layout is run with a <see cref="T:yWorks.Layout.LayoutExecutor" /> or the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" />.</para>
      </remarks>
    </member>
    <member name="F:yWorks.Layout.LayoutGraphAdapter.PortDummyNodeDpKey">
      <summary>
        <para>This key is used to provide information about dummy nodes that have been inserted into the graph to model edges at edges.</para>
      </summary>
      <remarks>
        <para>This key can be used to query an <see cref="T:yWorks.Algorithms.IDataProvider" /> that yields <c>true</c> for <see cref="M:yWorks.Algorithms.IDataProvider.GetBool(System.Object)" /> for nodes that are actually representatives of <see cref="T:yWorks.Graph.IPort" />s at <see cref="T:yWorks.Graph.IEdge" />s. Also the <see cref="M:yWorks.Algorithms.IDataProvider.Get(System.Object)" /> method will yield the corresponding original <see cref="T:yWorks.Graph.IEdge" />.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.#ctor">
      <summary>
        <para>Creates the adapter with no initial <see cref="T:yWorks.Graph.IGraph" /> and no <see cref="T:yWorks.Controls.ISelectionModel`1" />.</para>
      </summary>
      <remarks>
        <para>Before this instance can be used for automatic layouts, you mus assign a value to the <see cref="P:yWorks.Layout.LayoutGraphAdapter.AdaptedGraph" /> property.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.#ctor(yWorks.Graph.IGraph,yWorks.Controls.ISelectionModel{yWorks.Graph.IModelItem})">
      <summary>
        <para>Creates the adapter using a given <see cref="T:yWorks.Graph.IGraph" /> and <see cref="T:yWorks.Controls.ISelectionModel`1" />.</para>
      </summary>
      <param name="graph">
        <para>The graph to build an adapter for.</para>
      </param>
      <param name="selectionModel">
        <para>The optional selection model to use by the <see cref="F:yWorks.Layout.LayoutKeys.AffectedNodesDpKey" /> and <see cref="F:yWorks.Layout.LayoutKeys.AffectedEdgesDpKey" /> <see cref="T:yWorks.Algorithms.IDataProvider" /> instances that are automatically bound to this adapter.</para>
      </param>
      <exception cref="T:System.ArgumentNullException">
        <para>
          <c>graph</c> is null.</para>
      </exception>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.GetLabelCandidateDescriptorProvider(yWorks.Graph.IGraph)">
      <summary>
        <para>Callback method that gets the label candidate descriptor provider for the given <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <remarks>
        <para>This implementation uses the <see cref="T:yWorks.Graph.IGraph" />'s <see cref="T:yWorks.Graph.ILookup" /> to find an implementation of the <see cref="T:yWorks.Graph.LabelModels.ILabelCandidateDescriptorProvider" />.</para>
      </remarks>
      <param name="graph">
        <para>The graph.</para>
      </param>
      <returns>
        <para>The result of a <see cref="M:yWorks.Graph.ILookup.Lookup(System.Type)" /> query on <paramref name="graph" /> for the <see cref="T:yWorks.Graph.LabelModels.ILabelCandidateDescriptorProvider" /> type.</para>
      </returns>
    </member>
    <member name="P:yWorks.Layout.LayoutGraphAdapter.AdaptedGraph">
      <summary>
        <para>Sets or yields the original <see cref="T:yWorks.Graph.IGraph" /> instance that is adapted by this instance.</para>
      </summary>
      <remarks>
        <para>Before performing a layout, this property must be set <b>or</b> the adapter must have been created with <see cref="M:yWorks.Layout.LayoutGraphAdapter.#ctor(yWorks.Graph.IGraph,yWorks.Controls.ISelectionModel{yWorks.Graph.IModelItem})" />. Note that this property cannot be assigned again if its value is already non <c>null</c>.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">
        <para>if the value of this property is already non <c>null</c></para>
      </exception>
    </member>
    <member name="P:yWorks.Layout.LayoutGraphAdapter.SelectionModel">
      <summary>
        <para>Gets or sets the <see cref="T:yWorks.Controls.ISelectionModel`1" /> to use for the automatically registered <see cref="T:yWorks.Algorithms.IDataProvider" /> instances for the keys <see cref="F:yWorks.Layout.LayoutKeys.AffectedNodesDpKey" /> and <see cref="F:yWorks.Layout.LayoutKeys.AffectedEdgesDpKey" />.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.CreateNodeLayout(yWorks.Graph.INode)">
      <summary>
        <para>Factory method that creates a <see cref="T:yWorks.Layout.INodeLayout" /> implementation that wraps the given <see cref="T:yWorks.Graph.INode" /></para>
      </summary>
      <param name="node">
        <para>The node to wrap.</para>
      </param>
      <returns>
        <para>A wrapper instance.</para>
      </returns>
    </member>
    <member name="P:yWorks.Layout.LayoutGraphAdapter.EdgePortNodeSize">
      <summary>
        <para>Gets or sets the size of the nodes that are inserted for the ports that are created for <see cref="T:yWorks.Graph.IEdge" />s that are connected at other <see cref="T:yWorks.Graph.IEdge" />s.</para>
      </summary>
      <remarks>
        <para>If this instance is configured to create dummy nodes for ports at edges, this will be the initial size of the dummy nodes with the center of the node always being the location of the port. The default is <c>3x3</c>.</para>
      </remarks>
      <seealso cref="P:yWorks.Layout.LayoutGraphAdapter.HideEdgesAtEdges" />
    </member>
    <member name="P:yWorks.Layout.LayoutGraphAdapter.HideEdgesAtEdges">
      <summary>
        <para>Determines whether edges at other edges will be hidden from the layout graph or included.</para>
      </summary>
      <remarks>
        <para>If this property is set to <c>true</c>, edges at other edges are simply ignored and not part of the layout graph. The default is <c>false</c> in which case dummy nodes are inserted into the layout graph for each source and target port of an <see cref="T:yWorks.Graph.IEdge" /> that is <see cref="P:yWorks.Graph.IPort.Owner">owned</see> by an <see cref="T:yWorks.Graph.IEdge" />.</para>
      </remarks>
      <seealso cref="P:yWorks.Layout.LayoutGraphAdapter.EdgePortNodeSize" />
    </member>
    <member name="P:yWorks.Layout.LayoutGraphAdapter.AutomaticEdgeGrouping">
      <summary>
        <para>Controls whether edge groups are automatically created for edges that are connected to the same port.</para>
      </summary>
      <remarks>
        <para>If this property is enabled and no edge groups are explicitly created (<see cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" /> and <see cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />), for all ports with multiple outgoing resp. incoming edges these edges will be assigned to the same edge group. The necessary <see cref="T:yWorks.Algorithms.IDataProvider" />s will be created automatically.</para>
        <para>This features requires edge group support from the <see cref="T:yWorks.Layout.ILayoutAlgorithm" />.</para>
        <para>Default value is <c>true</c></para>
      </remarks>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
      <seealso cref="P:yWorks.Layout.LayoutExecutor.AutomaticEdgeGrouping" />
      <seealso cref="P:yWorks.Layout.LayoutGraphAdapter.FixPorts" />
    </member>
    <member name="P:yWorks.Layout.LayoutGraphAdapter.FixPorts">
      <summary>
        <para>Controls whether strong port constraints are automatically created.</para>
      </summary>
      <remarks>
        <para>If this property is enabled and no port constraints are explicitly created (<see cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" /> and <see cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />), for all edges strong source and target point constraints with <see cref="F:yWorks.Layout.PortSide.Any" /> are created. The necessary <see cref="T:yWorks.Algorithms.IDataProvider" />s will be created automatically.</para>
        <para>This ensures that view <see cref="T:yWorks.Graph.IPort" />s are not moved during the layout, if the <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> supports port constraints.</para>
        <para>Default value is <c>false</c></para>
      </remarks>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
      <seealso cref="P:yWorks.Layout.LayoutExecutor.FixPorts" />
      <seealso cref="P:yWorks.Layout.LayoutGraphAdapter.AutomaticEdgeGrouping" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.CreateEdgePortLayout(yWorks.Graph.IPort)">
      <summary>
        <para>Callback factory method that creates the <see cref="T:yWorks.Layout.INodeLayout" /> for the given <see cref="T:yWorks.Graph.IPort" /> that is used as a dummy to represent the port at the <see cref="T:yWorks.Graph.IEdge" /> that owns <paramref name="port" />.</para>
      </summary>
      <param name="port">
        <para>The port to create the layout for.</para>
      </param>
      <returns>
        <para>A suitable implementation of <see cref="T:yWorks.Layout.INodeLayout" /> that uses the <see cref="M:yWorks.Graph.GraphExtensions.GetLocation(yWorks.Graph.IPort)">port's location</see> as the center of the node.</para>
      </returns>
      <seealso cref="P:yWorks.Layout.LayoutGraphAdapter.EdgePortNodeSize" />
      <seealso cref="P:yWorks.Layout.LayoutGraphAdapter.HideEdgesAtEdges" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.SetEdgePortLocation(yWorks.Graph.IPort,yWorks.Geometry.PointD)">
      <summary>
        <para>Callback method that assigns a new location that matches <paramref name="newLocation" /> to <paramref name="port" />.</para>
      </summary>
      <remarks>
        <para>This method is called only for ports which are owned by edges. These are represented by dummy nodes during the layout, and <paramref name="newLocation" /> is the position of the dummy node after the layout.</para>
      </remarks>
      <param name="port">
        <para>The edge port that should be placed.</para>
      </param>
      <param name="newLocation">
        <para>The new location of the port as calculated by the layout algorithm.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.SetRelativePortLocation(yWorks.Graph.IPort,yWorks.Geometry.PointD)">
      <summary>
        <para>Callback method that assigns a new relative location to <paramref name="port" />.</para>
      </summary>
      <remarks>
        <para>The default implementation calls <see cref="M:yWorks.Graph.GraphExtensions.SetRelativePortLocation(yWorks.Graph.IGraph,yWorks.Graph.IPort,yWorks.Geometry.PointD)" /> with <paramref name="newRelativeLocation" />. Depending on the port location model, the actual resulting port location may be different.</para>
      </remarks>
      <param name="port">
        <para>The port that should be placed.</para>
      </param>
      <param name="newRelativeLocation">
        <para>The new coordinate offsets relative to the center of the node's <see cref="P:yWorks.Graph.INode.Layout" />'s center.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.CreateEdgeLayout(yWorks.Graph.IEdge)">
      <summary>
        <para>Factory method that creates an <see cref="T:yWorks.Layout.IEdgeLayout" /> implementation that wraps the given <see cref="T:yWorks.Graph.IEdge" /></para>
      </summary>
      <param name="edge">
        <para>The edge to wrap.</para>
      </param>
      <returns>
        <para>A wrapper instance.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.GetNodeLayout(System.Object)">
      <param name="o" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.GetEdgeLayout(System.Object)">
      <param name="edge" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.GetNodeLabelLayout(System.Object)">
      <param name="node" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.GetEdgeLabelLayout(System.Object)">
      <param name="edge" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.NodeObjects" />
    <member name="M:yWorks.Layout.LayoutGraphAdapter.EdgeObjects" />
    <member name="M:yWorks.Layout.LayoutGraphAdapter.GetSource(System.Object)">
      <param name="edgeObject" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.GetTarget(System.Object)">
      <param name="edgeObject" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.GetDataProvider(System.Object)">
      <param name="dataKey" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.AddDataProvider``2(System.Object,yWorks.Graph.IMapper{``0,``1})">
      <summary>
        <para>Registers a data provider with the graph using the given look-up key and wrapping the given mapper.</para>
      </summary>
      <remarks>
        <para>If a mapper is already registered under the given key, it is overwritten.</para>
      </remarks>
      <param name="dataKey">
        <para>The look-up key to register the data provider with.</para>
      </param>
      <param name="mapper">
        <para>The mapper wrapped as data provider.</para>
      </param>
      <typeparam name="K">
        <para>The type of the key to use.</para>
      </typeparam>
      <typeparam name="V">
        <para>The type of the value to use.</para>
      </typeparam>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.CreateNodeLabelCandidate(yWorks.Graph.ILabel,yWorks.Graph.ILabel,yWorks.Graph.LabelModels.ILabelModelParameter,yWorks.Layout.INodeLabelLayout)">
      <summary>
        <para>Creates a <see cref="T:yWorks.Layout.NodeLabelCandidate" /> for a given label and <see cref="T:yWorks.Graph.LabelModels.ILabelModelParameter" /> combination.</para>
      </summary>
      <param name="originalLabel">
        <para>The original label.</para>
      </param>
      <param name="dummyLabel">
        <para>The dummy label that describes the current laid out label.</para>
      </param>
      <param name="layoutParameter">
        <para>The parameter to create a candidate for.</para>
      </param>
      <param name="ownerLayout">
        <para>The <see cref="T:yWorks.Layout.INodeLabelLayout" /> of the label to pass to the candidate.</para>
      </param>
      <returns>
        <para>A candidate to yield for the labeling algorithms or <c>null</c>.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.GetLabelCandidateDescriptor(yWorks.Graph.ILabel,yWorks.Graph.ILabel,yWorks.Graph.LabelModels.ILabelModelParameter)">
      <summary>
        <para>Callback that retrieves the label candidate descriptor for the given label and parameter.</para>
      </summary>
      <param name="originalLabel">
        <para>The original label to which a parameter will be applied.</para>
      </param>
      <param name="dummyLabel">
        <para>The dummy label to which the parameter will be applied.</para>
      </param>
      <param name="layoutParameter">
        <para>The parameter to apply.</para>
      </param>
      <returns>
        <para>A descriptor or <c>null</c>.</para>
      </returns>
      <seealso cref="M:yWorks.Layout.LayoutGraphAdapter.CreateNodeLabelCandidate(yWorks.Graph.ILabel,yWorks.Graph.ILabel,yWorks.Graph.LabelModels.ILabelModelParameter,yWorks.Layout.INodeLabelLayout)" />
      <seealso cref="M:yWorks.Layout.LayoutGraphAdapter.CreateEdgeLabelCandidate(yWorks.Graph.ILabel,yWorks.Graph.ILabel,yWorks.Graph.LabelModels.ILabelModelParameter,yWorks.Layout.IEdgeLabelLayout)" />
      <seealso cref="M:yWorks.Layout.LayoutGraphAdapter.GetLabelCandidateDescriptorProvider(yWorks.Graph.IGraph)" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.CreateEdgeLabelCandidate(yWorks.Graph.ILabel,yWorks.Graph.ILabel,yWorks.Graph.LabelModels.ILabelModelParameter,yWorks.Layout.IEdgeLabelLayout)">
      <summary>
        <para>Creates the <see cref="T:yWorks.Layout.EdgeLabelCandidate" /> for a given label and <see cref="T:yWorks.Graph.LabelModels.ILabelModelParameter" /> combination.</para>
      </summary>
      <param name="originalLabel">
        <para>The original label.</para>
      </param>
      <param name="dummyLabel">
        <para>The dummy label that describes the current laid out label.</para>
      </param>
      <param name="layoutParameter">
        <para>The parameter to create a candidate for.</para>
      </param>
      <param name="labelLayout">
        <para>The <see cref="T:yWorks.Layout.IEdgeLabelLayout" /> of the label to pass to the candidate.</para>
      </param>
      <returns>
        <para>A candidate to yield for the labeling algorithms or <c>null</c>.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.CopyStyle(yWorks.Graph.Styles.IEdgeStyle)">
      <summary>
        <para>Creates a copy of an <see cref="T:yWorks.Graph.Styles.IEdgeStyle" /> instance that is used during the layout for path calculations and the like.</para>
      </summary>
      <remarks>
        <para>This method creates suitable copies of <paramref name="style" /> for the following <see cref="T:yWorks.Graph.Styles.IEdgeStyle" /> implementations:</para>
        <list type="bullet">
          <item>
            <see cref="T:yWorks.Graph.Styles.PolylineEdgeStyle" />
          </item>
          <item>
            <see cref="T:yWorks.Graph.Styles.ArcEdgeStyle" />
          </item>
          <item>
            <see cref="T:yWorks.Graph.Styles.VoidEdgeStyle" />
          </item>
        </list>
        <para>All other style implementations are replaced by instances of <see cref="T:yWorks.Graph.Styles.PolylineEdgeStyle" />. If you use a custom style where the edge path calculation depends on the style, you should overwrite this method and create a copy of your style instance.</para>
      </remarks>
      <param name="style">
        <para>The style to copy.</para>
      </param>
      <returns>
        <para>A replacement of <paramref name="style" /> that is used during layout calculation.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.CopyStyle(yWorks.Graph.Styles.INodeStyle)">
      <summary>
        <para>Creates a copy of an <see cref="T:yWorks.Graph.Styles.INodeStyle" /> instance that is used during the layout.</para>
      </summary>
      <remarks>
        <para>This method creates suitable copies of <paramref name="style" /> for the following <see cref="T:yWorks.Graph.Styles.INodeStyle" /> implementations:</para>
        <list type="bullet">
          <item>
            <see cref="T:yWorks.Graph.Styles.ShapeNodeStyle" />
          </item>
          <item>
            <see cref="T:yWorks.Graph.Styles.GeneralPathNodeStyle" />
          </item>
          <item>
            <see cref="T:yWorks.Graph.Styles.PanelNodeStyle" />
          </item>
          <item>
            <see cref="T:yWorks.Graph.Styles.ShinyPlateNodeStyle" />
          </item>
          <item>
            <see cref="T:yWorks.Graph.Styles.BevelNodeStyle" />
          </item>
        </list>
        <para>All other style implementations are replaced by instances of <see cref="T:yWorks.Graph.Styles.ShapeNodeStyle" />. If you use a custom style where the layout calculation depends on the style, you should overwrite this method and create a copy of your style instance.</para>
      </remarks>
      <param name="style">
        <para>The style to copy.</para>
      </param>
      <returns>
        <para>A replacement of <paramref name="style" /> that is used during layout calculation.</para>
      </returns>
    </member>
    <member name="P:yWorks.Layout.LayoutGraphAdapter.CopyStyles">
      <summary>
        <para>Controls whether node and edge styles should be copied during creation of the layout graph, or if the original instances should be used.</para>
      </summary>
      <remarks>
        <para>Using the original instances can lead to race conditions if the layout is calculated on a different thread. If <c>true</c>, node and edge styles are copied, otherwise, the original instances are used. Default value is <c>false</c>.</para>
      </remarks>
      <seealso cref="M:yWorks.Layout.LayoutGraphAdapter.CopyStyle(yWorks.Graph.Styles.IEdgeStyle)" />
      <seealso cref="M:yWorks.Layout.LayoutGraphAdapter.CopyStyle(yWorks.Graph.Styles.INodeStyle)" />
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.CreateCopiedLayoutGraph">
      <summary>
        <para>Creates a <see cref="T:yWorks.Layout.CopiedLayoutGraph" /> for this instance.</para>
      </summary>
      <returns>
        <para>An instance whose <see cref="M:yWorks.Layout.CopiedLayoutGraph.CommitLayoutToOriginalGraph" /> will update this instance.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)">
      <summary>
        <para>Static convenience method that applies a <see cref="T:yWorks.Layout.ILayoutAlgorithm">layout algorithm</see> to an <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <param name="layout">
        <para>The layout algorithm to apply.</para>
      </param>
      <param name="graph">
        <para>The graph to compute the layout on.</para>
      </param>
      <param name="layoutData">
        <para>The layout data.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.LayoutGraphAdapter.ApplyLayout(yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)">
      <summary>
        <para>Convenience method that applies a <see cref="T:yWorks.Layout.ILayoutAlgorithm">layout algorithm</see> to an <see cref="T:yWorks.Graph.IGraph" />, optionally applying some <see cref="T:yWorks.Layout.LayoutData" />.</para>
      </summary>
      <param name="layout">
        <para>The layout algorithm to apply.</para>
      </param>
      <param name="layoutData">
        <para>The layout data.</para>
      </param>
    </member>
    <member name="T:yWorks.Graph.LayoutMapperRegistryExtensions">
      <summary>
        <para>Provides static extension methods for the <see cref="T:yWorks.Graph.IMapperRegistry" /> that take <see cref="T:yWorks.Algorithms.NodeDpKey`1" />, <see cref="T:yWorks.Algorithms.EdgeDpKey`1" />, and <see cref="T:yWorks.Algorithms.ILabelLayoutDpKey`1" /> as tags.</para>
      </summary>
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.GetMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.NodeDpKey{``0})">
      <summary>
        <para>Returns a mapper that has previously been registered with this instance for the given tag.</para>
      </summary>
      <remarks>
        <para>The key type of the mapper is <see cref="T:yWorks.Graph.INode" /> while the value type of the mapper is inferred by the provided <paramref name="tag" />.</para>
      </remarks>
      <typeparam name="V">
        <para>The value type for the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag to use to look up the mapper.</para>
      </param>
      <returns>
        <para>The previously registered instance or <c>null</c>.</para>
      </returns>
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateWeakMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.NodeDpKey{``0})">
      <summary>
        <para>Creates and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> a new <see cref="T:yWorks.Graph.WeakDictionaryMapper`2" /> with key type <see cref="T:yWorks.Graph.INode" /> to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="T:yWorks.Graph.WeakDictionaryMapper`2" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateWeakMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.ILabelLayoutDpKey{``0})">
      <summary>
        <para>Creates and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> a new <see cref="T:yWorks.Graph.WeakDictionaryMapper`2" /> with key type <see cref="T:yWorks.Graph.ILabel" /> to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="T:yWorks.Graph.WeakDictionaryMapper`2" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.NodeDpKey{``0})">
      <summary>
        <para>Creates and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> a new <see cref="T:yWorks.Graph.DictionaryMapper`2" /> with key type <see cref="T:yWorks.Graph.INode" /> to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="T:yWorks.Graph.DictionaryMapper`2" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.ILabelLayoutDpKey{``0})">
      <summary>
        <para>Creates and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> a new <see cref="T:yWorks.Graph.DictionaryMapper`2" /> with key type <see cref="T:yWorks.Graph.ILabel" /> to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="T:yWorks.Graph.DictionaryMapper`2" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateDelegateMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.NodeDpKey{``0},yWorks.Graph.MapperDelegate{yWorks.Graph.INode,``0})">
      <summary>
        <para>Creates a delegate-based read-only <see cref="T:yWorks.Graph.IMapper`2" /> implementation with key type <see cref="T:yWorks.Graph.INode" /> and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> it to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <param name="getter">
        <para>The getter delegate to which <see cref="T:yWorks.Graph.IMapper`2" /> reads will be delegated.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="M:yWorks.Graph.Mappers.FromDelegate``2(yWorks.Graph.MapperDelegate{``0,``1})" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateConstantMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.NodeDpKey{``0},``0)">
      <summary>
        <para>Creates a simple read-only <see cref="T:yWorks.Graph.IMapper`2" /> implementation with key type <see cref="T:yWorks.Graph.INode" /> and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> it to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <param name="constant">
        <para>The value to yield during <see cref="T:yWorks.Graph.IMapper`2" /> reads.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="M:yWorks.Graph.Mappers.FromDelegate``2(yWorks.Graph.MapperDelegate{``0,``1})" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.GetMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.EdgeDpKey{``0})">
      <summary>
        <para>Returns a mapper that has previously been registered with this instance for the given tag.</para>
      </summary>
      <remarks>
        <para>The key type of the mapper is <see cref="T:yWorks.Graph.IEdge" /> while the value type of the mapper is inferred by the provided <paramref name="tag" />.</para>
      </remarks>
      <typeparam name="V">
        <para>The value type for the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag to use to look up the mapper.</para>
      </param>
      <returns>
        <para>The previously registered instance or <c>null</c>.</para>
      </returns>
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.GetMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.ILabelLayoutDpKey{``0})">
      <summary>
        <para>Returns a mapper that has previously been registered with this instance for the given tag.</para>
      </summary>
      <remarks>
        <para>The key type of the mapper is <see cref="T:yWorks.Graph.ILabel" /> while the value type of the mapper is inferred by the provided <paramref name="tag" />.</para>
      </remarks>
      <typeparam name="V">
        <para>The value type for the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag to use to look up the mapper.</para>
      </param>
      <returns>
        <para>The previously registered instance or <c>null</c>.</para>
      </returns>
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.AddMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.ILabelLayoutDpKey{``0},yWorks.Graph.IMapper{yWorks.Graph.ILabel,``0})">
      <summary>
        <para>Adds a previously created mapper to this instance for the given tag.</para>
      </summary>
      <remarks>
        <para>The key type of the mapper is <see cref="T:yWorks.Graph.ILabel" /> while the value type of the mapper is inferred by the provided <paramref name="tag" />.</para>
      </remarks>
      <typeparam name="V">
        <para>The value type for the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag to use to look up the mapper.</para>
      </param>
      <param name="mapper">
        <para>The mapper instance to register.</para>
      </param>
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.AddMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.NodeDpKey{``0},yWorks.Graph.IMapper{yWorks.Graph.INode,``0})">
      <summary>
        <para>Adds a previously created mapper to this instance for the given tag.</para>
      </summary>
      <remarks>
        <para>The key type of the mapper is <see cref="T:yWorks.Graph.INode" /> while the value type of the mapper is inferred by the provided <paramref name="tag" />.</para>
      </remarks>
      <typeparam name="V">
        <para>The value type for the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag to use to look up the mapper.</para>
      </param>
      <param name="mapper">
        <para>The mapper instance to register.</para>
      </param>
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.AddMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.EdgeDpKey{``0},yWorks.Graph.IMapper{yWorks.Graph.IEdge,``0})">
      <summary>
        <para>Adds a previously created mapper to this instance for the given tag.</para>
      </summary>
      <remarks>
        <para>The key type of the mapper is <see cref="T:yWorks.Graph.IEdge" /> while the value type of the mapper is inferred by the provided <paramref name="tag" />.</para>
      </remarks>
      <typeparam name="V">
        <para>The value type for the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag to use to look up the mapper.</para>
      </param>
      <param name="mapper">
        <para>The mapper instance to register.</para>
      </param>
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateWeakMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.EdgeDpKey{``0})">
      <summary>
        <para>Creates and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> a new <see cref="T:yWorks.Graph.WeakDictionaryMapper`2" /> with key type <see cref="T:yWorks.Graph.IEdge" /> to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="T:yWorks.Graph.WeakDictionaryMapper`2" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.EdgeDpKey{``0})">
      <summary>
        <para>Creates and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> a new <see cref="T:yWorks.Graph.DictionaryMapper`2" /> with key type <see cref="T:yWorks.Graph.IEdge" /> to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="T:yWorks.Graph.DictionaryMapper`2" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateDelegateMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.EdgeDpKey{``0},yWorks.Graph.MapperDelegate{yWorks.Graph.IEdge,``0})">
      <summary>
        <para>Creates a delegate-based read-only <see cref="T:yWorks.Graph.IMapper`2" /> implementation with key type <see cref="T:yWorks.Graph.IEdge" /> and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> it to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <param name="getter">
        <para>The getter delegate to which <see cref="T:yWorks.Graph.IMapper`2" /> reads will be delegated.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="M:yWorks.Graph.Mappers.FromDelegate``2(yWorks.Graph.MapperDelegate{``0,``1})" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateDelegateMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.ILabelLayoutDpKey{``0},yWorks.Graph.MapperDelegate{yWorks.Graph.ILabel,``0})">
      <summary>
        <para>Creates a delegate-based read-only <see cref="T:yWorks.Graph.IMapper`2" /> implementation with key type <see cref="T:yWorks.Graph.ILabel" /> and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> it to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <param name="getter">
        <para>The getter delegate to which <see cref="T:yWorks.Graph.IMapper`2" /> reads will be delegated.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="M:yWorks.Graph.Mappers.FromDelegate``2(yWorks.Graph.MapperDelegate{``0,``1})" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateConstantMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.EdgeDpKey{``0},``0)">
      <summary>
        <para>Creates a simple read-only <see cref="T:yWorks.Graph.IMapper`2" /> implementation with key type <see cref="T:yWorks.Graph.IEdge" /> and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> it to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <param name="constant">
        <para>The value to yield during <see cref="T:yWorks.Graph.IMapper`2" /> reads.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="M:yWorks.Graph.Mappers.FromDelegate``2(yWorks.Graph.MapperDelegate{``0,``1})" />
    </member>
    <member name="M:yWorks.Graph.LayoutMapperRegistryExtensions.CreateConstantMapper``1(yWorks.Graph.IMapperRegistry,yWorks.Algorithms.ILabelLayoutDpKey{``0},``0)">
      <summary>
        <para>Creates a simple read-only <see cref="T:yWorks.Graph.IMapper`2" /> implementation with key type <see cref="T:yWorks.Graph.ILabel" /> and <see cref="M:yWorks.Graph.IMapperRegistry.AddMapper``2(System.Object,yWorks.Graph.IMapper{``0,``1})">adds</see> it to the <paramref name="registry" /> using the provided <paramref name="tag" />.</para>
      </summary>
      <remarks>
        <para>The value type of the mapper is inferred by the provided <paramref name="tag" />. If there already was a mapper for <paramref name="tag" />, it will be replaced.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values of the mapper.</para>
      </typeparam>
      <param name="registry">
        <para>The registry.</para>
      </param>
      <param name="tag">
        <para>The tag.</para>
      </param>
      <param name="constant">
        <para>The value to yield during <see cref="T:yWorks.Graph.IMapper`2" /> reads.</para>
      </param>
      <returns>
        <para>The newly created mapper instance.</para>
      </returns>
      <seealso cref="M:yWorks.Graph.Mappers.FromDelegate``2(yWorks.Graph.MapperDelegate{``0,``1})" />
    </member>
    <member name="T:yWorks.Layout.Multipage.MultiPageLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Multipage.MultiPageLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Multipage.MultiPageLayoutData.NodeIds">
      <summary>
        <para>Gets or sets the mapping from nodes to their unique IDs.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Multipage.MultiPageLayout.NodeIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Multipage.MultiPageLayoutData.EdgeIds">
      <summary>
        <para>Gets or sets the mapping from edges to their unique IDs.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Multipage.MultiPageLayout.EdgeIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Multipage.MultiPageLayoutData.NodeLabelIds">
      <summary>
        <para>Gets or sets the mapping from node labels to their unique IDs.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Multipage.MultiPageLayout.NodeLabelIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Multipage.MultiPageLayoutData.EdgeLabelIds">
      <summary>
        <para>Gets or sets the mapping from edge labels to their unique IDs.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Multipage.MultiPageLayout.EdgeLabelIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Multipage.MultiPageLayoutData.NodeClusterIds">
      <summary>
        <para>Gets or sets the mapping from nodes to their cluster id.</para>
      </summary>
      <remarks>
        <para>Nodes with the same cluster id should preferably be placed on the same page.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Multipage.MultiPageLayout.NodeClusterIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Multipage.MultiPageLayoutData.EdgeTypes">
      <summary>
        <para>Gets or sets the mapping from edges to their type.</para>
      </summary>
      <remarks>
        <para>Multi-edges (edges with same endpoints) of different kind are distinguished if <see cref="P:yWorks.Layout.Multipage.MultiPageLayout.EdgeBundleModeMask" /> &amp; <see cref="F:yWorks.Layout.Multipage.EdgeBundleModes.DistinguishTypes" /> == 1.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Multipage.MultiPageLayout.EdgeTypeDpKey" />
    </member>
    <member name="P:yWorks.Layout.Multipage.MultiPageLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="M:yWorks.Layout.Multipage.MultiPageLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Router.OrganicEdgeRouterData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Router.OrganicEdgeRouter" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Router.OrganicEdgeRouterData.AffectedEdges">
      <summary>
        <para>Gets or sets the collection of edges routed by this router.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Router.OrganicEdgeRouter.AffectedEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.OrganicEdgeRouterData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="M:yWorks.Layout.Router.OrganicEdgeRouterData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Organic.OrganicLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Organic.OrganicLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Organic.OrganicLayoutData.AffectedNodes">
      <summary>
        <para>Gets or sets the collection of nodes that is laid out by the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Organic.OrganicLayout.AffectedNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Organic.OrganicLayoutData.PreferredEdgeLengths">
      <summary>
        <para>Gets or sets the mapping from edges to their preferred edge length.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Organic.OrganicLayout.PreferredEdgeLengthDpKey" />
    </member>
    <member name="P:yWorks.Layout.Organic.OrganicLayoutData.MinimumNodeDistances">
      <summary>
        <para>Gets or sets the mapping from nodes to their minimum distance to other nodes.</para>
      </summary>
      <remarks>
        <para>Note that the distances are only considered by the internally used <see cref="T:yWorks.Layout.Organic.ShuffleLayout" /> when <see cref="P:yWorks.Layout.Organic.OrganicLayout.NodeOverlapsAllowed" /> is <c>true</c> and <see cref="P:yWorks.Layout.Organic.OrganicLayout.Scope" /> is not <see cref="F:yWorks.Layout.Organic.Scope.All" />.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Organic.ShuffleLayout.MinimumDistanceDpKey" />
    </member>
    <member name="P:yWorks.Layout.Organic.OrganicLayoutData.GroupNodeModes">
      <summary>
        <para>Gets or sets the mapping from group nodes to a mode constant describing how to handle the group node.</para>
      </summary>
      <remarks>
        <para>The algorithm expects for each group node to find one of the following constants or <c>null</c>: <ul>
 <li>
 <see cref="F:yWorks.Layout.Organic.GroupNodeMode.Normal" />
 </li>
 <li>
 <see cref="F:yWorks.Layout.Organic.GroupNodeMode.FixBounds" />
 </li>
 <li>
 <see cref="F:yWorks.Layout.Organic.GroupNodeMode.FixContents" />
 </li>
 </ul></para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Organic.OrganicLayout.GroupNodeModeDpKey" />
    </member>
    <member name="P:yWorks.Layout.Organic.OrganicLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Organic.OrganicLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Organic.OrganicLayoutData.PartitionGridData">
      <summary>
        <para>Gets or sets the partition grid layout data.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Organic.OrganicLayoutData.EdgeDirectedness">
      <summary>
        <para>Gets or sets the mapping from edges to their directedness.</para>
      </summary>
      <remarks>
        <para>Generally, the organic layout algorithm doesn't consider the edge direction. Nevertheless, this property allows the user to specify hints on the directedness of edges. More precisely, a value of <c>1</c> indicates that the edge should be considered to be directed from source to target, a value of <c>-1</c> that it is directed from target to source, and a value of <c>0</c> means that it is undirected.</para>
        <para>Currently, the specified values are only considered during the detection of special substructures, see <see cref="P:yWorks.Layout.Organic.OrganicLayout.ChainSubstructureStyle" />, <see cref="P:yWorks.Layout.Organic.OrganicLayout.CycleSubstructureStyle" />, <see cref="P:yWorks.Layout.Organic.OrganicLayout.ParallelSubstructureStyle" /> and <see cref="P:yWorks.Layout.Organic.OrganicLayout.StarSubstructureStyle" />.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Organic.OrganicLayout.EdgeDirectednessDpKey" />
    </member>
    <member name="M:yWorks.Layout.Organic.OrganicLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Orthogonal.OrthogonalLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Orthogonal.OrthogonalLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Orthogonal.OrthogonalLayoutData.EdgeLayoutDescriptors">
      <summary>
        <para>Gets or sets the mapping from edges to their <see cref="T:yWorks.Layout.Orthogonal.EdgeLayoutDescriptor" />.</para>
      </summary>
      <seealso cref="T:yWorks.Layout.Orthogonal.EdgeLayoutDescriptor" />
      <seealso cref="F:yWorks.Layout.Orthogonal.OrthogonalLayout.EdgeLayoutDescriptorDpKey" />
    </member>
    <member name="P:yWorks.Layout.Orthogonal.OrthogonalLayoutData.DirectedEdges">
      <summary>
        <para>Gets or sets the collection of edges that should be routed in a way that point in the main layout direction.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Orthogonal.OrthogonalLayout.DirectedEdgeDpKey" />
    </member>
    <member name="P:yWorks.Layout.Orthogonal.OrthogonalLayoutData.SourceGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their source edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Orthogonal.OrthogonalLayoutData.TargetGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their target edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Orthogonal.OrthogonalLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Orthogonal.OrthogonalLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Orthogonal.OrthogonalLayoutData.EdgeLabelPreferredPlacement">
      <summary>
        <para>Gets or sets the mapping that provides a <see cref="T:yWorks.Layout.PreferredPlacementDescriptor" /> instance for edge <see cref="T:yWorks.Graph.ILabel" />s.</para>
      </summary>
      <seealso cref="T:yWorks.Layout.PreferredPlacementDescriptor" />
      <seealso cref="F:yWorks.Layout.LayoutGraphAdapter.EdgeLabelLayoutPreferredPlacementDescriptorDpKey" />
    </member>
    <member name="M:yWorks.Layout.Orthogonal.OrthogonalLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Router.OrthogonalPatternEdgeRouterData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Router.OrthogonalPatternEdgeRouter" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Router.OrthogonalPatternEdgeRouterData.AffectedEdges">
      <summary>
        <para>Gets or sets the collection of edges affected by this router.</para>
      </summary>
      <seealso cref="P:yWorks.Layout.Router.OrthogonalPatternEdgeRouter.AffectedEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.OrthogonalPatternEdgeRouterData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.OrthogonalPatternEdgeRouterData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.OrthogonalPatternEdgeRouterData.SourcePortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their source port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.SourcePortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.OrthogonalPatternEdgeRouterData.TargetPortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their target port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.TargetPortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.OrthogonalPatternEdgeRouterData.NodePortCandidateSets">
      <summary>
        <para>Gets or sets a mapping from nodes to their <see cref="T:yWorks.Layout.PortCandidateSet" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidateSet.NodePortCandidateSetDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.OrthogonalPatternEdgeRouterData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="M:yWorks.Layout.Router.OrthogonalPatternEdgeRouterData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.ParallelEdgeRouterData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.ParallelEdgeRouter" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.ParallelEdgeRouterData.AffectedEdges">
      <summary>
        <para>Gets or sets the collection of edges affected by this router.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.ParallelEdgeRouter.AffectedEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.ParallelEdgeRouterData.LeadingEdges">
      <summary>
        <para>Gets or sets the collection of leading edges.</para>
      </summary>
      <remarks>
        <para>A leading edge is the edge whose layout is used to obtain the layout of the corresponding parallel edges.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.ParallelEdgeRouter.LeadingEdgeDpKey" />
    </member>
    <member name="P:yWorks.Layout.ParallelEdgeRouterData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="M:yWorks.Layout.ParallelEdgeRouterData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Partial.PartialLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Partial.PartialLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.AffectedNodes">
      <summary>
        <para>Gets or sets the collection of nodes placed by the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Partial.PartialLayout.AffectedNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.AffectedEdges">
      <summary>
        <para>Gets or sets the collection of edges placed by the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Partial.PartialLayout.AffectedEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.DirectedEdges">
      <summary>
        <para>Gets or sets the collection of edges that are considered as directed by the layout.</para>
      </summary>
      <remarks>
        <para>Only if the <see cref="P:yWorks.Layout.Partial.PartialLayout.LayoutOrientation" /> is not <see cref="F:yWorks.Layout.Partial.LayoutOrientation.None" /> the directedness of edges has an effect.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Partial.PartialLayout.DirectedEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.ComponentIds">
      <summary>
        <para>Gets or sets the mapping from partial nodes to an object defining their component assignment.</para>
      </summary>
      <remarks>
        <para>All partial nodes associated with the same object are assigned to the same subgraph component.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Partial.PartialLayout.ComponentIdDpKey" />
      <seealso cref="F:yWorks.Layout.Partial.ComponentAssignmentStrategy.Customized" />
      <seealso cref="P:yWorks.Layout.Partial.PartialLayout.ComponentAssignmentStrategy" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.SourcePortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their source port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.SourcePortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.TargetPortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their target port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.TargetPortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Partial.PartialLayoutData.PartitionGridData">
      <summary>
        <para>Gets or sets the partition grid layout data.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.Partial.PartialLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Grid.PartitionGridData">
      <summary>
        <para>Specifies a <see cref="T:yWorks.Layout.Grid.PartitionGrid" /> for a layout.</para>
      </summary>
      <remarks>
        <para>The <see cref="T:yWorks.Layout.Grid.PartitionCellId" /> mapping has to be specified by either setting the <see cref="P:yWorks.Layout.Grid.PartitionGridData.CellIds" /> property, or either or both of the <see cref="P:yWorks.Layout.Grid.PartitionGridData.RowIndices" /> and <see cref="P:yWorks.Layout.Grid.PartitionGridData.ColumnIndices" /> properties. When <see cref="P:yWorks.Layout.Grid.PartitionGridData.CellIds" /> is set, the <see cref="P:yWorks.Layout.Grid.PartitionGridData.Grid" /> property must be set as well. Otherwise the size of the grid may be induced by the maximum row and column indices returned by <see cref="P:yWorks.Layout.Grid.PartitionGridData.RowIndices" /> and <see cref="P:yWorks.Layout.Grid.PartitionGridData.ColumnIndices" />.</para>
        <para>Note that cell spanning is only supported using the <see cref="P:yWorks.Layout.Grid.PartitionGridData.CellIds" />.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.Grid.PartitionGridData.Grid">
      <summary>
        <para>Gets or sets the partition grid.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Grid.PartitionGrid.PartitionGridDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grid.PartitionGridData.CellIds">
      <summary>
        <para>Gets or sets the mapping from nodes to <see cref="T:yWorks.Layout.Grid.PartitionCellId" /> using the partition grid as context.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Grid.PartitionGridData.RowIndices">
      <summary>
        <para>Gets or sets the mapping from nodes to the index of their rows.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Grid.PartitionGridData.ColumnIndices">
      <summary>
        <para>Gets or sets the mapping from nodes to the index of their columns.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.Grid.PartitionGridData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.PartitionLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.PartitionLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.PartitionLayoutData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.PartitionLayoutData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.PartitionLayoutData.SourcePortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their source port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.SourcePortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.PartitionLayoutData.TargetPortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their target port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.TargetPortCandidateCollectionDpKey" />
    </member>
    <member name="M:yWorks.Layout.PartitionLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Router.Polyline.EdgeRouter" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.AffectedEdges">
      <summary>
        <para>Gets or sets the collection of affected edges.</para>
      </summary>
      <remarks>
        <para>This collection is only used by the router if the <see cref="P:yWorks.Layout.Router.Polyline.EdgeRouter.Scope" /> is set to <see cref="F:yWorks.Layout.Router.Scope.RouteAffectedEdges" />.</para>
      </remarks>
      <seealso cref="P:yWorks.Layout.Router.Polyline.EdgeRouter.AffectedEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.AffectedNodes">
      <summary>
        <para>Gets or sets the collection of affected nodes.</para>
      </summary>
      <remarks>
        <para>This collection is only used by the router if the <see cref="P:yWorks.Layout.Router.Polyline.EdgeRouter.Scope" /> is set to <see cref="F:yWorks.Layout.Router.Scope.RouteEdgesAtAffectedNodes" />.</para>
      </remarks>
      <seealso cref="P:yWorks.Layout.Router.Polyline.EdgeRouter.AffectedNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.IgnoredLabels">
      <summary>
        <para>Gets or sets the collection of labels of nodes or fixed edges that are ignored by the router.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.LabelLayoutKeys.IgnoredLabelsDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.EdgeLayoutDescriptors">
      <summary>
        <para>Gets or sets the mapping of edges to their <see cref="T:yWorks.Layout.Router.Polyline.EdgeLayoutDescriptor" /></para>
      </summary>
      <remarks>
        <para>If an edge is mapped to <c>null</c>, the <see cref="P:yWorks.Layout.Router.Polyline.EdgeRouter.DefaultEdgeLayoutDescriptor">default descriptor</see> is used.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Router.Polyline.EdgeRouter.EdgeLayoutDescriptorDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.LabelCrossingPenaltyFactors">
      <summary>
        <para>Gets or sets a mapping from labels to a crossing penalty factor.</para>
      </summary>
      <remarks>
        <para>The crossing penalty factor of a label is multiplied with the basic penalty for an edge crossing the label so crossing a label with a higher cost factor is stronger avoided then crossing one with a lower factor.</para>
      </remarks>
      <seealso cref="P:yWorks.Layout.Router.Polyline.PenaltySettings.EdgeLabelCrossingPenalty" />
      <seealso cref="P:yWorks.Layout.Router.Polyline.PenaltySettings.NodeLabelCrossingPenalty" />
      <seealso cref="F:yWorks.Layout.Router.Polyline.EdgeRouter.LabelCrossingPenaltyFactorDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.SourcePortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their source port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.SourcePortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.TargetPortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their target port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.TargetPortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.NodePortCandidateSets">
      <summary>
        <para>Gets or sets a mapping from nodes to their <see cref="T:yWorks.Layout.PortCandidateSet" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidateSet.NodePortCandidateSetDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.SourceGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their source edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.TargetGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their target edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.PartitionGridData">
      <summary>
        <para>Gets or sets the partition grid layout data.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.Router.Polyline.PolylineEdgeRouterData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Radial.RadialLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Radial.RadialLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Radial.RadialLayoutData.CenterNodes">
      <summary>
        <para>Gets or sets the collection of nodes that shall be placed in the center with <see cref="P:yWorks.Layout.Radial.RadialLayout.CenterNodesPolicy">center node policy</see> set to <see cref="F:yWorks.Layout.Radial.CenterNodesPolicy.Custom" /> .</para>
      </summary>
      <seealso cref="P:yWorks.Layout.Radial.RadialLayout.CenterNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Radial.RadialLayoutData.NodeInfos">
      <summary>
        <para>Gets or sets the mapping from nodes to a <see cref="T:yWorks.Layout.Radial.RadialLayout.NodeInfo" /> describing on which circle and in which sector the node is placed.</para>
      </summary>
      <remarks>
        <para>If the mapper contains a <see cref="T:yWorks.Layout.Radial.RadialLayout.NodeInfo" /> for a node, the layout will update its property during the layout.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Radial.RadialLayout.NodeInfoDpKey" />
    </member>
    <member name="P:yWorks.Layout.Radial.RadialLayoutData.SourceGroups">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their source edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Radial.RadialLayoutData.TargetGroups">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their target edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Radial.RadialLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Radial.RadialLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Radial.RadialLayoutData.EdgeBundleDescriptors">
      <summary>
        <para>Gets or sets the mapping of edges to their <see cref="T:yWorks.Layout.EdgeBundleDescriptor" />.</para>
      </summary>
      <remarks>
        <para>Bundling together multiple edges means that their common parts are to some degree merged into a bundled part. At the source and target point, the edges are again clearly split.</para>
        <para>If an edge is mapped to <c>null</c>, the <see cref="P:yWorks.Layout.EdgeBundling.DefaultBundleDescriptor">default descriptor</see> is used.</para>
      </remarks>
      <seealso cref="T:yWorks.Layout.EdgeBundleDescriptor" />
      <seealso cref="P:yWorks.Layout.Radial.RadialLayout.EdgeBundling" />
    </member>
    <member name="M:yWorks.Layout.Radial.RadialLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Grouping.RecursiveGroupLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Grouping.RecursiveGroupLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.GroupNodeLayouts">
      <summary>
        <para>Gets or sets the mapping from group nodes to the <see cref="T:yWorks.Layout.ILayoutAlgorithm" /> used for their child nodes.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Grouping.RecursiveGroupLayout.GroupNodeLayoutDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.SourceSplitIds">
      <summary>
        <para>Gets or sets a mapping from edges connecting to group nodes to source split ids.</para>
      </summary>
      <remarks>
        <para>Edges will be aligned with edges that connect to the same group node and have the same split id at their source (preferably) or target.</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Grouping.RecursiveGroupLayout.SourceSplitIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.TargetSplitIds">
      <summary>
        <para>Gets or sets a mapping from edges connecting to group nodes to target split ids.</para>
      </summary>
      <remarks>
        <para>Edges will be aligned with edges that connect to the same group node and have the same split id at their source or target (preferably).</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Grouping.RecursiveGroupLayout.TargetSplitIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.SourcePortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their source port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.SourcePortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.TargetPortCandidates">
      <summary>
        <para>Gets or sets a mapping from edges to a collection of their target port <see cref="T:yWorks.Layout.PortCandidate">candidates</see>.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidate.TargetPortCandidateCollectionDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.NodePortCandidateSets">
      <summary>
        <para>Gets or sets a mapping from nodes to their <see cref="T:yWorks.Layout.PortCandidateSet" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortCandidateSet.NodePortCandidateSetDpKey" />
    </member>
    <member name="P:yWorks.Layout.Grouping.RecursiveGroupLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="M:yWorks.Layout.Grouping.RecursiveGroupLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.ReverseEdgesStageData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.ReverseEdgesStage" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.ReverseEdgesStageData.AffectedEdges">
      <summary>
        <para>Gets or sets the collection of affected edges.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.ReverseEdgesStage.AffectedEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.ReverseEdgesStageData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.ReverseEdgesStageData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.ReverseEdgesStageData.SourceGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their source edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.ReverseEdgesStageData.TargetGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their target edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
    </member>
    <member name="M:yWorks.Layout.ReverseEdgesStageData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Hierarchic.SelfLoopCalculatorData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Hierarchic.SelfLoopCalculator" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Hierarchic.SelfLoopCalculatorData.OctilinearEdges">
      <summary>
        <para>Gets or sets the collection of edges that are octilinear.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.SelfLoopCalculator.OctilinearEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.SelfLoopCalculatorData.MinimumNodeDistances">
      <summary>
        <para>Gets or sets the mapping from nodes to their minimum distance to selfloop edges.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.SelfLoopCalculator.MinimumNodeDistanceDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.SelfLoopCalculatorData.MinimumEdgeDistances">
      <summary>
        <para>Gets or sets the mapping from edges to their minimum distance to the next edge and to node sides.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.SelfLoopCalculator.MinimumEdgeDistanceDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.SelfLoopCalculatorData.MinimumFirstSegmentLengths">
      <summary>
        <para>Gets or sets the mapping from edges to the minimum length of their first segment.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.SelfLoopCalculator.MinimumFirstSegmentLengthDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.SelfLoopCalculatorData.MinimumLastSegmentLengths">
      <summary>
        <para>Gets or sets the mapping from edges to the minimum length of their last segment.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.SelfLoopCalculator.MinimumLastSegmentLengthDpKey" />
    </member>
    <member name="P:yWorks.Layout.Hierarchic.SelfLoopCalculatorData.MinimumOctilinearSegmentLengths">
      <summary>
        <para>Gets or sets the mapping from edges to the minimum length of their octilinear segments.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Hierarchic.SelfLoopCalculator.MinimumOctilinearSegmentLengthDpKey" />
    </member>
    <member name="M:yWorks.Layout.Hierarchic.SelfLoopCalculatorData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.SeriesParallel.SeriesParallelLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.SeriesParallel.SeriesParallelLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.SeriesParallel.SeriesParallelLayoutData.EdgeLayoutDescriptors">
      <summary>
        <para>Gets or sets the mapping from edges to their <see cref="T:yWorks.Layout.SeriesParallel.EdgeLayoutDescriptor" />.</para>
      </summary>
      <seealso cref="T:yWorks.Layout.SeriesParallel.EdgeLayoutDescriptor" />
      <seealso cref="F:yWorks.Layout.SeriesParallel.SeriesParallelLayout.EdgeLayoutDescriptorDpKey" />
    </member>
    <member name="P:yWorks.Layout.SeriesParallel.SeriesParallelLayoutData.PortAssignments">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.SeriesParallel.IPortAssignment" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.SeriesParallel.SeriesParallelLayout.PortAssignmentDpKey" />
    </member>
    <member name="P:yWorks.Layout.SeriesParallel.SeriesParallelLayoutData.OutEdgeComparers">
      <summary>
        <para>Gets or sets the mapping from nodes to comparison functions used to sort the nodes' outgoing edges.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.SeriesParallel.SeriesParallelLayout.OutEdgeComparerDpKey" />
    </member>
    <member name="P:yWorks.Layout.SeriesParallel.SeriesParallelLayoutData.SourceGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their source edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourceGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.SeriesParallel.SeriesParallelLayoutData.TargetGroupIds">
      <summary>
        <para>Gets or sets a mapping from edges to an object representing their target edge group.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetGroupIdDpKey" />
    </member>
    <member name="P:yWorks.Layout.SeriesParallel.SeriesParallelLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.SeriesParallel.SeriesParallelLayoutData.EdgeLabelPreferredPlacement">
      <summary>
        <para>Gets or sets the mapping that provides a <see cref="T:yWorks.Layout.PreferredPlacementDescriptor" /> instance for edge <see cref="T:yWorks.Graph.ILabel" />s.</para>
      </summary>
      <seealso cref="T:yWorks.Layout.PreferredPlacementDescriptor" />
      <seealso cref="F:yWorks.Layout.LayoutGraphAdapter.EdgeLabelLayoutPreferredPlacementDescriptorDpKey" />
    </member>
    <member name="M:yWorks.Layout.SeriesParallel.SeriesParallelLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.SingleItemCollection`1">
      <summary>
        <para>Provides different ways to define the items in a collection for use with <see cref="T:yWorks.Layout.LayoutData" />, especially if the collection contains only one item.</para>
      </summary>
      <remarks>
        <para>Only one of the provided ways to define a collection can be used at the same time, therefore only one of the properties <see cref="P:yWorks.Layout.SingleItemCollection`1.Item" />, <see cref="P:yWorks.Layout.ItemCollection`1.Items" />, <see cref="P:yWorks.Layout.ItemCollection`1.Mapper" />, and <see cref="P:yWorks.Layout.ItemCollection`1.Delegate" /> should be set on each instance.</para>
        <para>This class supports <see cref="T:yWorks.Layout.LayoutData" /> implementations and does not usually have to be used explicitly.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the items in the collection.</para>
      </typeparam>
    </member>
    <member name="P:yWorks.Layout.SingleItemCollection`1.Item">
      <summary>
        <para>Gets or sets the single item this item collection contains.</para>
      </summary>
    </member>
    <member name="M:yWorks.Layout.SingleItemCollection`1.ProvideMapper(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm)">
      <summary>
        <para>Provides a mapper describing which elements are contained in this <see cref="T:yWorks.Layout.ItemCollection`1" />.</para>
      </summary>
      <param name="adapter">
        <para>The graph adapter the mapper shall be provided for.</para>
      </param>
      <param name="layout">
        <para>The layout using the item collection.</para>
      </param>
      <returns />
    </member>
    <member name="T:yWorks.Layout.Router.StraightLineEdgeRouterData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Router.StraightLineEdgeRouter" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Router.StraightLineEdgeRouterData.AffectedEdges">
      <summary>
        <para>Gets or sets the collection of affected edges.</para>
      </summary>
      <remarks>
        <para>This collection is only used by the router if the <see cref="P:yWorks.Layout.Router.StraightLineEdgeRouter.Scope" /> is set to <see cref="F:yWorks.Layout.Router.Scope.RouteAffectedEdges" />.</para>
      </remarks>
      <seealso cref="P:yWorks.Layout.Router.StraightLineEdgeRouter.AffectedEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.StraightLineEdgeRouterData.AffectedNodes">
      <summary>
        <para>Gets or sets the collection of affected nodes.</para>
      </summary>
      <remarks>
        <para>This collection is only used by the router if the <see cref="P:yWorks.Layout.Router.StraightLineEdgeRouter.Scope" /> is set to <see cref="F:yWorks.Layout.Router.Scope.RouteEdgesAtAffectedNodes" />.</para>
      </remarks>
      <seealso cref="P:yWorks.Layout.Router.StraightLineEdgeRouter.AffectedNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.StraightLineEdgeRouterData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Router.StraightLineEdgeRouterData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="M:yWorks.Layout.Router.StraightLineEdgeRouterData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.TableLayoutConfigurator">
      <summary>
        <para>Creates a <see cref="T:yWorks.Layout.Grid.PartitionGrid" /> that matches a given table configuration of an <see cref="T:yWorks.Graph.IGraph" /> and registers <see cref="T:yWorks.Graph.IMapper`2" /> for that grid at the graph.</para>
      </summary>
      <remarks>
        <para>Typically, this class is used as part of the convenience class <see cref="T:yWorks.Layout.LayoutExecutor" /> to <see cref="M:yWorks.Layout.TableLayoutConfigurator.Prepare(yWorks.Graph.IGraph)" /> a partition grid before the layout is calculated and <see cref="M:yWorks.Layout.TableLayoutConfigurator.Restore(yWorks.Graph.IGraph)" /> the graph afterwards.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.TableLayoutConfigurator.MinimumTableDistance">
      <summary>
        <para>Gets or sets the minimum distance between two different table nodes</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.TableLayoutConfigurator.Compaction">
      <summary>
        <para>Specifies whether or not to enable size compaction for table nodes.</para>
      </summary>
      <remarks>
        <para>If size compaction is enabled, the size of a column or row (or a table node for that matter) may be reduced due to layout calculation, but never below the column's or row's minimum size. If size compaction is disabled, columns and rows (and therefore table nodes) may only grow due to layout calculation.</para>
        <para>The default value for this property is <c>true</c>.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.TableLayoutConfigurator.HorizontalLayout">
      <summary>
        <para>Gets or sets whether the configurator will prepare its associated graph for a vertical (that is top-to-bottom or bottom-to-top) layout calculation or a horizontal (that is left-to-right or right-to-left) one.</para>
      </summary>
      <remarks>
        <para>The default value for this property is <c>false</c>.</para>
      </remarks>
    </member>
    <member name="P:yWorks.Layout.TableLayoutConfigurator.FromSketch">
      <summary>
        <para>Specifies whether or not from sketch mode should be enabled.</para>
      </summary>
      <remarks>
        <para>If enabled, the positions of the table group nodes are considered, i.e., for horizontal layout configuration these nodes are sorted according to their y-coordinate and for vertical layout configuration according to their x-coordinate.</para>
      </remarks>
    </member>
    <member name="M:yWorks.Layout.TableLayoutConfigurator.Prepare(yWorks.Graph.IGraph)">
      <summary>
        <para>Setup partition grid information from a graph that contains table structures</para>
      </summary>
      <param name="graph" />
    </member>
    <member name="M:yWorks.Layout.TableLayoutConfigurator.Restore(yWorks.Graph.IGraph)">
      <summary>
        <para>Write back all information from the partition grid</para>
      </summary>
      <param name="graph" />
    </member>
    <member name="M:yWorks.Layout.TableLayoutConfigurator.CleanUp(yWorks.Graph.IGraph)">
      <summary>
        <para>Destroy all information that results from a previous <see cref="M:yWorks.Layout.TableLayoutConfigurator.Prepare(yWorks.Graph.IGraph)" /> and a subsequent layout</para>
      </summary>
      <param name="graph" />
    </member>
    <member name="M:yWorks.Layout.TableLayoutConfigurator.GetColumnLayout(yWorks.Graph.ITable,yWorks.Geometry.RectD)">
      <summary>
        <para>Return the sizes of all <b>leaf</b> rows.</para>
      </summary>
      <remarks>
        <para>This method does not modify <paramref name="originalTable" />. You also need to call <see cref="M:yWorks.Layout.TableLayoutConfigurator.CleanUp(yWorks.Graph.IGraph)" /> explicitly if you don't need the <see cref="T:yWorks.Layout.TableLayoutConfigurator" /> anymore.</para>
      </remarks>
      <param name="originalTable">
        <para>The table</para>
      </param>
      <param name="nodeLayout">
        <para>The final layout of the node that owns the table</para>
      </param>
      <returns>
        <para>The sizes of all <b>leaf</b> rows in <paramref name="originalTable" />, in their natural order.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.TableLayoutConfigurator.GetRowLayout(yWorks.Graph.ITable,yWorks.Geometry.RectD)">
      <summary>
        <para>Return the sizes of all <b>leaf</b> rows.</para>
      </summary>
      <remarks>
        <para>This method does not modify <paramref name="originalTable" />. You also need to call <see cref="M:yWorks.Layout.TableLayoutConfigurator.CleanUp(yWorks.Graph.IGraph)" /> explicitly if you don't need the <see cref="T:yWorks.Layout.TableLayoutConfigurator" /> anymore.</para>
      </remarks>
      <param name="originalTable">
        <para>The table</para>
      </param>
      <param name="nodeLayout">
        <para>The final layout of the node that owns the table</para>
      </param>
      <returns>
        <para>The sizes of all <b>leaf</b> rows in <paramref name="originalTable" />, in their natural order.</para>
      </returns>
    </member>
    <member name="T:yWorks.Layout.Tree.TreeLayoutData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Tree.TreeLayout" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.NodePlacers">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.Tree.INodePlacer" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Tree.TreeLayout.NodePlacerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.PortAssignments">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.Tree.IPortAssignment" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Tree.TreeLayout.PortAssignmentDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.OutEdgeComparers">
      <summary>
        <para>Gets or sets the mapping from nodes to comparison functions used to sort the nodes' outgoing edges.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Tree.TreeLayout.OutEdgeComparerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.NodeHalos">
      <summary>
        <para>Gets or sets the mapping from nodes to their <see cref="T:yWorks.Layout.NodeHalo" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.NodeHalo.NodeHaloDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.SourcePortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their source <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.SourcePortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.TargetPortConstraints">
      <summary>
        <para>Gets or sets a mapping from edges to their target <see cref="T:yWorks.Layout.PortConstraint" />.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.PortConstraintKeys.TargetPortConstraintDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.AssistantNodes">
      <summary>
        <para>Gets or sets the collection of nodes the <see cref="T:yWorks.Layout.Tree.AssistantNodePlacer" /> considers as assistants.</para>
      </summary>
      <remarks>
        <para>This collection is only considered if <see cref="P:yWorks.Layout.Tree.TreeLayoutData.NodePlacers" /> returns any <see cref="T:yWorks.Layout.Tree.AssistantNodePlacer" /> .</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Tree.AssistantNodePlacer.AssistantNodeDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.DelegatingNodePlacersPrimaryNodes">
      <summary>
        <para>Gets or sets the collection of nodes the <see cref="T:yWorks.Layout.Tree.DelegatingNodePlacer" /> places with its <see cref="P:yWorks.Layout.Tree.DelegatingNodePlacer.PrimaryPlacer" />.</para>
      </summary>
      <remarks>
        <para>This collection is only considered if <see cref="P:yWorks.Layout.Tree.TreeLayoutData.NodePlacers" /> returns any <see cref="T:yWorks.Layout.Tree.DelegatingNodePlacer" /> .</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Tree.DelegatingNodePlacer.PrimaryNodesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.LeftRightPlacersLeftNodes">
      <summary>
        <para>Gets or sets a mapping from nodes to a boolean value that specifies whether a node should be placed left of the bus (<c>true</c>) or right of the bus (<c>false</c>).</para>
      </summary>
      <remarks>
        <para>This mapping is only considered if <see cref="P:yWorks.Layout.Tree.TreeLayoutData.NodePlacers" /> returns a <see cref="T:yWorks.Layout.Tree.LeftRightNodePlacer" /> .</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Tree.LeftRightNodePlacer.LeftRightDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.GridNodePlacerRowIndices">
      <summary>
        <para>Gets or sets the mapping from nodes to the index of the row the <see cref="T:yWorks.Layout.Tree.GridNodePlacer" /> shall place the node in.</para>
      </summary>
      <remarks>
        <para>This collection is only considered if <see cref="P:yWorks.Layout.Tree.TreeLayoutData.NodePlacers" /> returns any <see cref="T:yWorks.Layout.Tree.GridNodePlacer" /> .</para>
      </remarks>
      <seealso cref="F:yWorks.Layout.Tree.GridNodePlacer.RowIndexDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.AbortHandler">
      <summary>
        <para>Gets or sets the AbortHandler used during the layout.</para>
      </summary>
      <seealso cref="F:yWorks.Algorithms.AbortHandler.AbortHandlerDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.TreeRoot">
      <summary>
        <para>Gets or sets the mapping for marking the node that will be used as root node of the tree.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Tree.TreeLayout.SelectedRootDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeLayoutData.EdgeLabelPreferredPlacement">
      <summary>
        <para>Gets or sets the mapping that provides a <see cref="T:yWorks.Layout.PreferredPlacementDescriptor" /> instance for edge <see cref="T:yWorks.Graph.ILabel" />s.</para>
      </summary>
      <seealso cref="T:yWorks.Layout.PreferredPlacementDescriptor" />
      <seealso cref="F:yWorks.Layout.LayoutGraphAdapter.EdgeLabelLayoutPreferredPlacementDescriptorDpKey" />
    </member>
    <member name="M:yWorks.Layout.Tree.TreeLayoutData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.Tree.TreeReductionStageData">
      <summary>
        <para>Specifies custom data for the <see cref="T:yWorks.Layout.Tree.TreeReductionStage" />.</para>
      </summary>
    </member>
    <member name="P:yWorks.Layout.Tree.TreeReductionStageData.NonTreeEdges">
      <summary>
        <para>Gets or sets the collection of edges explicitly marked as not belonging to a tree.</para>
      </summary>
      <seealso cref="F:yWorks.Layout.Tree.TreeReductionStage.NonTreeEdgesDpKey" />
    </member>
    <member name="P:yWorks.Layout.Tree.TreeReductionStageData.EdgeBundleDescriptors">
      <summary>
        <para>Gets or sets the mapping of edges to their <see cref="T:yWorks.Layout.EdgeBundleDescriptor" />.</para>
      </summary>
      <remarks>
        <para>Bundling together multiple edges means that their common parts are to some degree merged into a bundled part. At the source and target point, the edges are again clearly split.</para>
        <para>If an edge is mapped to <c>null</c>, the <see cref="P:yWorks.Layout.EdgeBundling.DefaultBundleDescriptor">default descriptor</see> is used.</para>
      </remarks>
      <seealso cref="T:yWorks.Layout.EdgeBundleDescriptor" />
      <seealso cref="P:yWorks.Layout.Tree.TreeReductionStage.EdgeBundling" />
    </member>
    <member name="M:yWorks.Layout.Tree.TreeReductionStageData.Apply(yWorks.Layout.LayoutGraphAdapter,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.CopiedLayoutGraph)">
      <param name="adapter" />
      <param name="layout" />
      <param name="layoutGraph" />
    </member>
    <member name="T:yWorks.Layout.YGraphAdapter">
      <summary>
        <para>Converts an <see cref="T:yWorks.Graph.IGraph" /> instance into a <see cref="T:yWorks.Algorithms.Graph" /> instance.</para>
      </summary>
      <remarks>
        <para>This class creates a structural copy of a given <see cref="T:yWorks.Graph.IGraph" /> and provides convenience methods to convert items from one graph instance to their corresponding item in the other graph instance.</para>
        <para>The main use case of this class is executing one of the analysis algorithms on an <see cref="T:yWorks.Graph.IGraph" />, for example <see cref="T:yWorks.Algorithms.ShortestPaths" />, <see cref="T:yWorks.Algorithms.Cycles" />, and <see cref="T:yWorks.Algorithms.Centrality" />. For executing a layout algorithm, use the convenience class <see cref="T:yWorks.Layout.LayoutExecutor" />, the convenience methods <see cref="M:yWorks.Graph.LayoutExtensions.ApplyLayout(yWorks.Graph.IGraph,yWorks.Layout.ILayoutAlgorithm,yWorks.Layout.LayoutData)" /> and <see cref="M:yWorks.Graph.LayoutExtensions.MorphLayout(yWorks.Controls.GraphControl,yWorks.Layout.ILayoutAlgorithm,System.TimeSpan)" />, or <see cref="T:yWorks.Layout.LayoutGraphAdapter" />.</para>
      </remarks>
      <seealso cref="T:yWorks.Layout.LayoutGraphAdapter" />
      <seealso cref="T:yWorks.Layout.LayoutExecutor" />
      <seealso cref="T:yWorks.Algorithms.Bipartitions" />
      <seealso cref="T:yWorks.Algorithms.Centrality" />
      <seealso cref="T:yWorks.Algorithms.Cycles" />
      <seealso cref="T:yWorks.Algorithms.GraphChecker" />
      <seealso cref="T:yWorks.Algorithms.GraphConnectivity" />
      <seealso cref="T:yWorks.Algorithms.Groups" />
      <seealso cref="T:yWorks.Algorithms.IndependentSets" />
      <seealso cref="T:yWorks.Algorithms.NetworkFlows" />
      <seealso cref="T:yWorks.Algorithms.NodeOrders" />
      <seealso cref="T:yWorks.Algorithms.Paths" />
      <seealso cref="T:yWorks.Algorithms.RankAssignments" />
      <seealso cref="T:yWorks.Algorithms.ShortestPaths" />
      <seealso cref="T:yWorks.Algorithms.SpanningTrees" />
      <seealso cref="T:yWorks.Algorithms.Transitivity" />
      <seealso cref="T:yWorks.Algorithms.Trees" />
    </member>
    <member name="P:yWorks.Layout.YGraphAdapter.YGraph">
      <summary>
        <para>Gets the graph instance that is created during the constructor call.</para>
      </summary>
      <value>
        <para>The graph instance that can be used for the algorithms.</para>
      </value>
    </member>
    <member name="P:yWorks.Layout.YGraphAdapter.OriginalGraph">
      <summary>
        <para>Gets the original graph instance.</para>
      </summary>
      <value>
        <para>The original graph.</para>
      </value>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.#ctor(yWorks.Graph.IGraph)">
      <summary>
        <para>Initializes a new instance of the <see cref="T:yWorks.Layout.YGraphAdapter" /> class.</para>
      </summary>
      <remarks>
        <para>This will create a copy of the <paramref name="originalGraph" /> that has the same structure and makes it available via the <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" /> property.</para>
      </remarks>
      <param name="originalGraph">
        <para>The original graph whose structure will be copied.</para>
      </param>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">
      <summary>
        <para>Yields the original node from the <see cref="P:yWorks.Layout.YGraphAdapter.OriginalGraph">original IGraph</see> that the given node has been created for.</para>
      </summary>
      <param name="node">
        <para>The node for which the original instance will be returned.</para>
      </param>
      <returns>
        <para>The original instance.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">
      <summary>
        <para>Yields the original edge from the <see cref="P:yWorks.Layout.YGraphAdapter.OriginalGraph">original IGraph</see> that the given edge has been created for.</para>
      </summary>
      <param name="edge">
        <para>The edge for which the original instance will be returned.</para>
      </param>
      <returns>
        <para>The original instance.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.GetCopiedNode(yWorks.Graph.INode)">
      <summary>
        <para>Yields the node that has been created as a copy in <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" /> to represent the given node.</para>
      </summary>
      <param name="node">
        <para>The node for which the representation is returned.</para>
      </param>
      <returns>
        <para>The node that represents <paramref name="node" /> in <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.GetCopiedEdge(yWorks.Graph.IEdge)">
      <summary>
        <para>Yields the edge that has been created as a copy in <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" /> to represent the given edge.</para>
      </summary>
      <param name="edge">
        <para>The edge for which the representation is returned.</para>
      </param>
      <returns>
        <para>The edge that represents <paramref name="edge" /> in <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateEdgeEnumerable(yWorks.Algorithms.EdgeList)">
      <summary>
        <para>Creates an <see cref="T:System.Collections.Generic.IEnumerable`1">enumerable of edges</see> that maps the edges from the <see cref="T:yWorks.Algorithms.EdgeList" /> to their <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">original</see> ones.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms yield <see cref="T:yWorks.Algorithms.EdgeList" /> instances as results and the result needs to be interpreted in terms of the <see cref="P:yWorks.Layout.YGraphAdapter.OriginalGraph" />.</para>
      </remarks>
      <param name="edges">
        <para>The edge list.</para>
      </param>
      <returns>
        <para>An enumerable that contains the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">original</see> edges for the ones in the list.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateNodeEnumerable(yWorks.Algorithms.NodeList)">
      <summary>
        <para>Creates an <see cref="T:System.Collections.Generic.IEnumerable`1">enumerable of nodes</see> that maps the nodes from the <see cref="T:yWorks.Algorithms.NodeList" /> to their <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">original</see> ones.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms yield <see cref="T:yWorks.Algorithms.NodeList" /> instances as results and the result needs to be interpreted in terms of the <see cref="P:yWorks.Layout.YGraphAdapter.OriginalGraph" />.</para>
      </remarks>
      <param name="nodes">
        <para>The node list.</para>
      </param>
      <returns>
        <para>An enumerable that contains the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">original</see> nodes for the ones in the list.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateEdgeList(System.Collections.Generic.IEnumerable{yWorks.Graph.IEdge})">
      <summary>
        <para>Creates an <see cref="T:yWorks.Algorithms.EdgeList" /> that maps the edges from the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to their <see cref="M:yWorks.Layout.YGraphAdapter.GetCopiedEdge(yWorks.Graph.IEdge)">copied</see> ones.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms require <see cref="T:yWorks.Algorithms.EdgeList" /> instances as input and those edges are available as <see cref="T:System.Collections.Generic.IEnumerable`1" />s in the <see cref="P:yWorks.Layout.YGraphAdapter.OriginalGraph" />.</para>
      </remarks>
      <param name="edges">
        <para>The edges from the <see cref="P:yWorks.Layout.YGraphAdapter.OriginalGraph" />.</para>
      </param>
      <returns>
        <para>An <see cref="T:yWorks.Algorithms.EdgeList" /> that contains the <see cref="M:yWorks.Layout.YGraphAdapter.GetCopiedEdge(yWorks.Graph.IEdge)">copied</see> edges for the ones in the enumerable.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateNodeList(System.Collections.Generic.IEnumerable{yWorks.Graph.INode})">
      <summary>
        <para>Creates a <see cref="T:yWorks.Algorithms.NodeList" /> that maps the nodes from the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to their <see cref="M:yWorks.Layout.YGraphAdapter.GetCopiedNode(yWorks.Graph.INode)">copied</see> ones.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms require <see cref="T:yWorks.Algorithms.NodeList" /> instances as input and those nodes are available as <see cref="T:System.Collections.Generic.IEnumerable`1" />s in the <see cref="P:yWorks.Layout.YGraphAdapter.OriginalGraph" />.</para>
      </remarks>
      <param name="nodes">
        <para>The nodes from the <see cref="P:yWorks.Layout.YGraphAdapter.OriginalGraph" />.</para>
      </param>
      <returns>
        <para>A <see cref="T:yWorks.Algorithms.NodeList" /> that contains the <see cref="M:yWorks.Layout.YGraphAdapter.GetCopiedNode(yWorks.Graph.INode)">copied</see> nodes for the ones in the enumerable.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateDataProvider``2(yWorks.Graph.IMapper{``0,``1})">
      <summary>
        <para>Creates an <see cref="T:yWorks.Algorithms.IDataProvider" /> that delegates to the provided <see cref="T:yWorks.Graph.IMapper`2" /> when queried for items in the <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms require <see cref="T:yWorks.Algorithms.IDataProvider" />s as input and that input can be obtained from <see cref="T:yWorks.Graph.IMapper`2" /> instances that provide the values for the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">original nodes</see> and <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">edges</see>.</para>
      </remarks>
      <typeparam name="K">
        <para>The type of the keys in the mapper.</para>
      </typeparam>
      <typeparam name="V">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="mapper">
        <para>The mapper to direct requests to.</para>
      </param>
      <returns>
        <para>A DataProvider that will delegate requests to the <paramref name="mapper" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateDataProvider``2(yWorks.Graph.MapperDelegate{``0,``1})">
      <summary>
        <para>Creates an <see cref="T:yWorks.Algorithms.IDataProvider" /> that delegates to the provided delegate when queried for items in the <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms require <see cref="T:yWorks.Algorithms.IDataProvider" />s as input and that input can be through a dynamic callback that provides the values for the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">original nodes</see> and <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">edges</see>.</para>
      </remarks>
      <typeparam name="K">
        <para>The type of the keys in the mapper.</para>
      </typeparam>
      <typeparam name="V">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="getter">
        <para>The mapper delegate to direct requests to.</para>
      </param>
      <returns>
        <para>A DataProvider that will delegate requests to the <paramref name="getter" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateMapper``1(yWorks.Algorithms.INodeMap)">
      <summary>
        <para>Creates an <see cref="T:yWorks.Graph.IMapper`2" /> that delegates to the provided <see cref="T:yWorks.Algorithms.INodeMap" /> when queried for items in the <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms yield <see cref="T:yWorks.Algorithms.INodeMap" />s and their values should be provided using <see cref="T:yWorks.Graph.IMapper`2" /> instances that use the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">original nodes</see>.</para>
      </remarks>
      <typeparam name="T">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="nodeMap">
        <para>The map to direct requests to.</para>
      </param>
      <returns>
        <para>A mapper that will delegate requests to the <paramref name="nodeMap" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateMapper``1(yWorks.Algorithms.IEdgeMap)">
      <summary>
        <para>Creates an <see cref="T:yWorks.Graph.IMapper`2" /> that delegates to the provided <see cref="T:yWorks.Algorithms.IEdgeMap" /> when queried for items in the <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms yield <see cref="T:yWorks.Algorithms.IDataProvider" />s and their values should be provided using <see cref="T:yWorks.Graph.IMapper`2" /> instances that use the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">original edges</see>.</para>
      </remarks>
      <typeparam name="T">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="edgeMap">
        <para>The map to direct requests to.</para>
      </param>
      <returns>
        <para>A mapper that will delegate requests to the <paramref name="edgeMap" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateMapper``1(yWorks.Algorithms.IDataProvider)">
      <summary>
        <para>Creates an <see cref="T:yWorks.Graph.IMapper`2" /> that delegates to the provided <see cref="T:yWorks.Algorithms.IDataProvider" /> when queried for items in the <see cref="T:yWorks.Graph.IGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms yield <see cref="T:yWorks.Algorithms.IDataProvider" />s and their values should be provided using <see cref="T:yWorks.Graph.IMapper`2" /> instances that use the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">original edges</see> and the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">original nodes</see>.</para>
      </remarks>
      <typeparam name="T">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="dataProvider">
        <para>The provider to direct requests to.</para>
      </param>
      <returns>
        <para>A mapper that will delegate requests to the <paramref name="dataProvider" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateDataMap``2(yWorks.Graph.IMapper{``0,``1})">
      <summary>
        <para>Creates an <see cref="T:yWorks.Algorithms.IDataMap" /> that delegates to the provided <see cref="T:yWorks.Graph.IMapper`2" /> when queried for items in the <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms require <see cref="T:yWorks.Algorithms.IDataMap" />s as input and that input can be obtained from <see cref="T:yWorks.Graph.IMapper`2" /> instances that provide and accept values for the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">original nodes</see> and <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">edges</see>.</para>
      </remarks>
      <typeparam name="K">
        <para>The type of the keys in the mapper.</para>
      </typeparam>
      <typeparam name="V">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="mapper">
        <para>The mapper to direct requests to.</para>
      </param>
      <returns>
        <para>An <see cref="T:yWorks.Algorithms.IDataMap" /> that will delegate the functionality to the <paramref name="mapper" />.</para>
      </returns>
      <seealso cref="M:yWorks.Layout.YGraphAdapter.CreateDataProvider``2(yWorks.Graph.IMapper{``0,``1})" />
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateNodeMap``1(yWorks.Graph.IMapper{yWorks.Graph.INode,``0})">
      <summary>
        <para>Creates an <see cref="T:yWorks.Algorithms.INodeMap" /> that delegates to the provided <see cref="T:yWorks.Graph.IMapper`2" /> when queried for <see cref="T:yWorks.Algorithms.Node" />s in the <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms require <see cref="T:yWorks.Algorithms.INodeMap" />s as input and this can be mapped to corresponding <see cref="T:yWorks.Graph.IMapper`2" /> instances that provide and accept the values for the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">original nodes</see>.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="mapper">
        <para>The mapper to direct requests to.</para>
      </param>
      <returns>
        <para>An <see cref="T:yWorks.Algorithms.INodeMap" /> that will delegate reads and writes to the <paramref name="mapper" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateNodeMap``1(yWorks.Graph.MapperDelegate{yWorks.Graph.INode,``0})">
      <summary>
        <para>Creates an <see cref="T:yWorks.Algorithms.INodeMap" /> that delegates to the provided delegate when queried for <see cref="T:yWorks.Algorithms.Node" />s in the <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms require <see cref="T:yWorks.Algorithms.INodeMap" />s as input and this can be mapped to a corresponding dynamic callback that provides the values for the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalNode(yWorks.Algorithms.Node)">original nodes</see>.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="getter">
        <para>The mapper delegate to direct read requests to.</para>
      </param>
      <returns>
        <para>An <see cref="T:yWorks.Algorithms.INodeMap" /> that will delegate reads to the <paramref name="getter" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateEdgeMap``1(yWorks.Graph.IMapper{yWorks.Graph.IEdge,``0})">
      <summary>
        <para>Creates an <see cref="T:yWorks.Algorithms.IEdgeMap" /> that delegates to the provided <see cref="T:yWorks.Graph.IMapper`2" /> when queried for <see cref="T:yWorks.Algorithms.Edge" />s in the <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms require <see cref="T:yWorks.Algorithms.IEdgeMap" />s as input and this can be mapped to corresponding <see cref="T:yWorks.Graph.IMapper`2" /> instances that provide and accept the values for the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">original edges</see>.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="mapper">
        <para>The mapper to direct requests to.</para>
      </param>
      <returns>
        <para>An <see cref="T:yWorks.Algorithms.IEdgeMap" /> that will delegate reads and writes to the <paramref name="mapper" />.</para>
      </returns>
    </member>
    <member name="M:yWorks.Layout.YGraphAdapter.CreateEdgeMap``1(yWorks.Graph.MapperDelegate{yWorks.Graph.IEdge,``0})">
      <summary>
        <para>Creates an <see cref="T:yWorks.Algorithms.IEdgeMap" /> that delegates to the provided delegate when queried for <see cref="T:yWorks.Algorithms.Edge" />s in the <see cref="P:yWorks.Layout.YGraphAdapter.YGraph" />.</para>
      </summary>
      <remarks>
        <para>This method is useful where algorithms require <see cref="T:yWorks.Algorithms.IEdgeMap" />s as input and this can be mapped to a corresponding dynamic callback that provides the values for the <see cref="M:yWorks.Layout.YGraphAdapter.GetOriginalEdge(yWorks.Algorithms.Edge)">original edges</see>.</para>
      </remarks>
      <typeparam name="V">
        <para>The type of the values in the mapper.</para>
      </typeparam>
      <param name="getter">
        <para>The mapper delegate to direct read requests to.</para>
      </param>
      <returns>
        <para>An <see cref="T:yWorks.Algorithms.INodeMap" /> that will delegate reads to the <paramref name="getter" />.</para>
      </returns>
    </member>
  </members>
</doc>